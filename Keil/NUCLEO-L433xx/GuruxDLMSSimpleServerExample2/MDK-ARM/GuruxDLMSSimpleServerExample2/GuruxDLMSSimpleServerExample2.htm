<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [GuruxDLMSSimpleServerExample2\GuruxDLMSSimpleServerExample2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image GuruxDLMSSimpleServerExample2\GuruxDLMSSimpleServerExample2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Mon Oct 23 11:09:20 2023
<BR><P>
<H3>Maximum Stack Usage =       1148 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; svr_handleRequest &rArr; svr_handleRequest4 &rArr; svr_handleCommand &rArr; svr_handleMethodRequest &rArr; cosem_invoke &rArr; invoke_AssociationLogicalName &rArr; dlms_secure &rArr; cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[99]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[1c3]">dlms_handleGeneralCiphering</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b3]">dlms_getPdu</a><BR>
 <LI><a href="#[1b3]">dlms_getPdu</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b3]">dlms_getPdu</a><BR>
 <LI><a href="#[1be]">dlms_handleGbt</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b3]">dlms_getPdu</a><BR>
 <LI><a href="#[11f]">dlms_getData</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11f]">dlms_getData</a><BR>
 <LI><a href="#[1b0]">dlms_getHdlcData</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b0]">dlms_getHdlcData</a><BR>
 <LI><a href="#[1da]">var_toInteger</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1da]">var_toInteger</a><BR>
 <LI><a href="#[210]">var_getBytes3</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[210]">var_getBytes3</a><BR>
 <LI><a href="#[155]">invoke_ScriptTable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14b]">cosem_invoke</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32l4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[3b]">COMP_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[4b]">CRS_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[36]">DMA2_Channel1_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[37]">DMA2_Channel2_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[38]">DMA2_Channel3_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[39]">DMA2_Channel4_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[3a]">DMA2_Channel5_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel6_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[40]">DMA2_Channel7_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32l4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[30]">EXTI15_10_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[4a]">FPU_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[5b]">HAL_UARTEx_RxEventCallback</a> from stm32l4xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback) referenced 2 times from stm32l4xx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[5a]">HAL_UARTEx_WakeupCallback</a> from stm32l4xx_hal_uart_ex.o(.text.HAL_UARTEx_WakeupCallback) referenced 2 times from stm32l4xx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[57]">HAL_UART_AbortCpltCallback</a> from stm32l4xx_hal_uart.o(.text.HAL_UART_AbortCpltCallback) referenced 2 times from stm32l4xx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[59]">HAL_UART_AbortReceiveCpltCallback</a> from stm32l4xx_hal_uart.o(.text.HAL_UART_AbortReceiveCpltCallback) referenced 2 times from stm32l4xx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[58]">HAL_UART_AbortTransmitCpltCallback</a> from stm32l4xx_hal_uart.o(.text.HAL_UART_AbortTransmitCpltCallback) referenced 2 times from stm32l4xx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[56]">HAL_UART_ErrorCallback</a> from stm32l4xx_hal_uart.o(.text.HAL_UART_ErrorCallback) referenced 2 times from stm32l4xx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[5c]">HAL_UART_MspInit</a> from stm32l4xx_hal_msp.o(.text.HAL_UART_MspInit) referenced 2 times from stm32l4xx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[55]">HAL_UART_RxCpltCallback</a> from stm32l4xx_hal_uart.o(.text.HAL_UART_RxCpltCallback) referenced 2 times from stm32l4xx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[54]">HAL_UART_RxHalfCpltCallback</a> from stm32l4xx_hal_uart.o(.text.HAL_UART_RxHalfCpltCallback) referenced 2 times from stm32l4xx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[52]">HAL_UART_TxCpltCallback</a> from stm32l4xx_hal_uart.o(.text.HAL_UART_TxCpltCallback) referenced 2 times from stm32l4xx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[53]">HAL_UART_TxHalfCpltCallback</a> from stm32l4xx_hal_uart.o(.text.HAL_UART_TxHalfCpltCallback) referenced 2 times from stm32l4xx_hal_uart.o(.text.HAL_UART_Init)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32l4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[28]">I2C1_ER_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[27]">I2C1_EV_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[2a]">I2C2_ER_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[29]">I2C2_EV_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[44]">I2C3_ER_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[43]">I2C3_EV_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[48]">LCD_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[3c]">LPTIM1_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[3d]">LPTIM2_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[41]">LPUART1_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32l4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32l4xx_it.o(.text.NMI_Handler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[b]">PVD_PVM_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32l4xx_it.o(.text.PendSV_Handler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[42]">QUADSPI_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[49]">RNG_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[31]">RTC_Alarm_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[5f]">Receive</a> from main.o(.text.Receive) referenced 2 times from main.o(.text.main)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[45]">SAI1_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[32]">SDMMC1_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[2b]">SPI1_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[2c]">SPI2_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[33]">SPI3_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32l4xx_it.o(.text.SVC_Handler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[46]">SWPMI1_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32l4xx_it.o(.text.SysTick_Handler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[4c]">SystemInit</a> from system_stm32l4xx.o(.text.SystemInit) referenced from startup_stm32l433xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[34]">TIM6_DAC_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[35]">TIM7_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[47]">TSC_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[51]">UART_DMAAbortOnError</a> from stm32l4xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32l4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[5e]">UART_RxISR_16BIT</a> from stm32l4xx_hal_uart.o(.text.UART_RxISR_16BIT) referenced 2 times from stm32l4xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[5d]">UART_RxISR_8BIT</a> from stm32l4xx_hal_uart.o(.text.UART_RxISR_8BIT) referenced 4 times from stm32l4xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[2d]">USART1_IRQHandler</a> from stm32l4xx_it.o(.text.USART1_IRQHandler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[2e]">USART2_IRQHandler</a> from stm32l4xx_it.o(.text.USART2_IRQHandler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[2f]">USART3_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[3e]">USB_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32l4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32l433xx.o(.text) referenced from startup_stm32l433xx.o(RESET)
 <LI><a href="#[4d]">__main</a> from __main.o(!!!main) referenced from startup_stm32l433xx.o(.text)
 <LI><a href="#[50]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[4f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[4e]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[62]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[220]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[221]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[63]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[222]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[64]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[89]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[66]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[68]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[6a]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[223]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[6b]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[6d]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[224]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[77]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[6f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[225]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[71]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[226]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[227]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[228]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[229]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[22a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[73]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[22b]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[22c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[22d]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[22e]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[22f]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[230]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[231]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[232]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[233]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[234]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[235]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[236]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[237]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[238]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[239]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[7c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[23a]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[23b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[23c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[23d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[23e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[23f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[240]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[61]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[241]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[74]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[76]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[242]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[78]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1148 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; svr_handleRequest &rArr; svr_handleRequest4 &rArr; svr_handleCommand &rArr; svr_handleMethodRequest &rArr; cosem_invoke &rArr; invoke_AssociationLogicalName &rArr; dlms_secure &rArr; cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[243]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[9a]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[7b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[244]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[7d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l433xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32l433xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[245]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createObjects
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXTRACE
</UL>

<P><STRONG><a name="[82]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[83]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[81]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[69]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[65]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[85]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[67]"></a>_printf_hex_ptr</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, _printf_hex_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[246]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_ptr.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[da]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_parseUserInformation
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_initialize
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_SapAssigment
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_AssociationLogicalName
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLNObjects
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleGloDedRequest
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getLNPdu
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_checkLLCBytes
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getGloMessage
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_useDedicatedKey
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oa_findByLN
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_findObjectByLN
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_decryptKey
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_crypt
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_compare
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_parsePDU
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNormal
</UL>

<P><STRONG><a name="[a0]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_addString
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXTRACE
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_AssociationLogicalName
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSecuritySetup
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getAssociationLogicalName
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUserList
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_get
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_addString
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_AssociationLogicalName
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_copy
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_removeByIndex
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOctetString
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getString
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBitString
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gxaes_ecb_decrypt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_decryptKey
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gxaes_ecb_encrypt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_crypt
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_getGHash
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_insert
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set2
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[8a]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[247]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_insert
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_move
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_insertUInt8
</UL>

<P><STRONG><a name="[8c]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
</UL>

<P><STRONG><a name="[248]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
</UL>

<P><STRONG><a name="[14e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_invoke
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_copy
</UL>

<P><STRONG><a name="[249]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_init4
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getString2
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString2
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_getGHash
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_zero
</UL>

<P><STRONG><a name="[24b]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[24e]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[80]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[4e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[92]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[6c]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[93]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[94]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[6e]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[95]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[86]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[251]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[8e]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[253]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[75]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[72]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[7a]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[254]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[255]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[7e]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[256]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>Error_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[9d]"></a>GXTRACE</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, main.o(.text.GXTRACE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GXTRACE &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createObjects
</UL>

<P><STRONG><a name="[ae]"></a>HAL_DMA_Abort</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32l4xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>HAL_Delay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32l4xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXTRACE
</UL>

<P><STRONG><a name="[b6]"></a>HAL_GPIO_Init</STRONG> (Thumb, 426 bytes, Stack size 44 bytes, stm32l4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXTRACE
</UL>

<P><STRONG><a name="[bc]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a2]"></a>HAL_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32l4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>HAL_InitTick</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32l4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a5]"></a>HAL_MspInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b7]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[a7]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[a3]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1e0]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(.text.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[a8]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 744 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[aa]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 634 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c0]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[be]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[ab]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 2000 bytes, Stack size 40 bytes, stm32l4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[5b]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[5a]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart_ex.o(.text.HAL_UARTEx_WakeupCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[57]"></a>HAL_UART_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_AbortCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[59]"></a>HAL_UART_AbortReceiveCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_AbortReceiveCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[58]"></a>HAL_UART_AbortTransmitCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_AbortTransmitCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[56]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[ad]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 1500 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>HAL_UART_Init</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>HAL_UART_MspInit</STRONG> (Thumb, 238 bytes, Stack size 128 bytes, stm32l4xx_hal_msp.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[b8]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_UART_RegisterCallback</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_RegisterCallback))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_RxCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[54]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_RxHalfCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[9f]"></a>HAL_UART_Transmit</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXTRACE
</UL>

<P><STRONG><a name="[52]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_TxCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[53]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.HAL_UART_TxHalfCpltCallback))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(.text.HAL_UART_Init)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>Receive</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, main.o(.text.Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Receive &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32l4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[b1]"></a>UART_SetConfig</STRONG> (Thumb, 544 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[b9]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 374 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.UART_Start_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[b3]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 526 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[2d]"></a>USART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USART2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l433xx.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>aes_Encrypt</STRONG> (Thumb, 758 bytes, Stack size 52 bytes, ciphering.o(.text.aes_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = aes_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_crypt
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_gctr
</UL>

<P><STRONG><a name="[c5]"></a>apdu_generateAARE</STRONG> (Thumb, 846 bytes, Stack size 240 bytes, apdu.o(.text.apdu_generateAARE))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = apdu_generateAARE &rArr; apdu_getUserInformation &rArr; cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt16
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_setObjectCount
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCiphered
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_generateApplicationContextName
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_attach
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_capacity
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8ByIndex
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_getUserInformation
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set2
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_HandleAarqRequest
</UL>

<P><STRONG><a name="[c6]"></a>apdu_generateApplicationContextName</STRONG> (Thumb, 434 bytes, Stack size 24 bytes, apdu.o(.text.apdu_generateApplicationContextName))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = apdu_generateApplicationContextName &rArr; bb_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCiphered
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_generateAARE
</UL>

<P><STRONG><a name="[d1]"></a>apdu_getConformanceFromArray</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, apdu.o(.text.apdu_getConformanceFromArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = apdu_getConformanceFromArray
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_swapBits
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_parseUserInformation
</UL>

<P><STRONG><a name="[cf]"></a>apdu_getUserInformation</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, apdu.o(.text.apdu_getUserInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = apdu_getUserInformation &rArr; cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt16
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_setConformanceToArray
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCiphered
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_generateAARE
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleReleaseRequest
</UL>

<P><STRONG><a name="[de]"></a>apdu_handleResultComponent</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, apdu.o(.text.apdu_handleResultComponent))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_parsePDU
</UL>

<P><STRONG><a name="[d6]"></a>apdu_parseApplicationContextName</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, apdu.o(.text.apdu_parseApplicationContextName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = apdu_parseApplicationContextName
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_parsePDU
</UL>

<P><STRONG><a name="[d7]"></a>apdu_parsePDU</STRONG> (Thumb, 1882 bytes, Stack size 64 bytes, apdu.o(.text.apdu_parsePDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = apdu_parsePDU &rArr; apdu_parseUserInformation &rArr; cip_decrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_get
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_parseUserInformation
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handleResultComponent
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_updateAuthentication
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set2
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_updatePassword
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_parseApplicationContextName
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_HandleAarqRequest
</UL>

<P><STRONG><a name="[dd]"></a>apdu_parseUserInformation</STRONG> (Thumb, 894 bytes, Stack size 80 bytes, apdu.o(.text.apdu_parseUserInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = apdu_parseUserInformation &rArr; cip_decrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_get
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_decrypt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_setObjectCount
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_getConformanceFromArray
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt16
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_parsePDU
</UL>

<P><STRONG><a name="[d4]"></a>apdu_setConformanceToArray</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, apdu.o(.text.apdu_setConformanceToArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = apdu_setConformanceToArray
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_swapBits
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_getUserInformation
</UL>

<P><STRONG><a name="[d9]"></a>apdu_updateAuthentication</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, apdu.o(.text.apdu_updateAuthentication))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = apdu_updateAuthentication
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_parsePDU
</UL>

<P><STRONG><a name="[dc]"></a>apdu_updatePassword</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, apdu.o(.text.apdu_updatePassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = apdu_updatePassword &rArr; bb_set2
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set2
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_parsePDU
</UL>

<P><STRONG><a name="[159]"></a>arr_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gxarray.o(.text.arr_clear))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_clearCertificateInfo
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_clearScriptTable
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_clearProfileGenericCaptureObjects
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_clearSapList
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_clearPushObjectList
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setFSKMacCounters
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKPhyMacSetUp
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setActionSchedule
</UL>

<P><STRONG><a name="[177]"></a>arr_clearKeyValuePair</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gxarray.o(.text.arr_clearKeyValuePair))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setMbusPortSetup
</UL>

<P><STRONG><a name="[10c]"></a>arr_getByIndex</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gxarray.o(.text.arr_getByIndex))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_ScriptTable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_SapAssigment
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_AssociationLogicalName
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getFSKMacCounters
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSFSKPhyMacSetUp
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getPushSetup
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getMbusPortSetup
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getMbusDiagnostic
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getScriptTable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSapAssignment
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getColumns
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSecuritySetup
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUserList
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getActionSchedule
</UL>

<P><STRONG><a name="[130]"></a>arr_getByIndex2</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gxarray.o(.text.arr_getByIndex2))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getLimiter
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCaptureObjects
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setMbusDiagnostic
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setMbusPortSetup
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setLimiter
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSecuritySetup
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKReportingSystemList
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setFSKMacCounters
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKPhyMacSetUp
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setPushSetup
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setActionSchedule
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSapAssignment
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setAssociationLogicalName
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setScriptTable
</UL>

<P><STRONG><a name="[15a]"></a>arr_getCapacity</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gxarray.o(.text.arr_getCapacity))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_AssociationLogicalName
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCaptureObjects
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setMbusDiagnostic
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setMbusPortSetup
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setLimiter
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSecuritySetup
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKReportingSystemList
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setFSKMacCounters
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKPhyMacSetUp
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setPushSetup
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setActionSchedule
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSapAssignment
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setAssociationLogicalName
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setScriptTable
</UL>

<P><STRONG><a name="[e1]"></a>arr_removeByIndex</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, gxarray.o(.text.arr_removeByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = arr_removeByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_SapAssigment
</UL>

<P><STRONG><a name="[12d]"></a>ba_attach</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bitarray.o(.text.ba_attach))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setBitString
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getIntegerFromBitString
</UL>

<P><STRONG><a name="[e2]"></a>ba_getByteCount</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bitarray.o(.text.ba_getByteCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ba_getByteCount &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBitString
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setBitString
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getIntegerFromBitString
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getBytes3
</UL>

<P><STRONG><a name="[e7]"></a>ba_setByIndex</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, bitarray.o(.text.ba_setByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ba_setByIndex &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setBitString
</UL>

<P><STRONG><a name="[e8]"></a>ba_toInteger</STRONG> (Thumb, 520 bytes, Stack size 80 bytes, bitarray.o(.text.ba_toInteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ba_toInteger &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getIntegerFromBitString
</UL>

<P><STRONG><a name="[ea]"></a>bb_addString</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bytebuffer.o(.text.bb_addString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bb_addString &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createObjects
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cl_init
</UL>

<P><STRONG><a name="[cb]"></a>bb_attach</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_attach))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_SecuritySetup
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_AssociationLogicalName
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getAssociationLogicalName
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_secure
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleDataNotification
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getLNPdu
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcFrame
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_crypt
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_generateAARE
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest4
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleReleaseRequest
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequestWithList
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_HandleAarqRequest
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setData
</UL>

<P><STRONG><a name="[f6]"></a>bb_available</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_available))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_AssociationLogicalName
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleExceptionResponse
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getPdu
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getLNPdu
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcFrame
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_crypt
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
</UL>

<P><STRONG><a name="[cc]"></a>bb_capacity</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_capacity))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLNObjects
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_secure
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData3
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getWrapperFrame
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcFrame
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setBitString
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_decryptKey
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_crypt
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_generateAARE
</UL>

<P><STRONG><a name="[d0]"></a>bb_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_clear))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_AssociationLogicalName
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_secure
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_generateChallenge
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleDataNotification
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getWrapperFrame
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getDataFromBlock
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcData
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcFrame
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_crypt
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_generateAARE
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_parsePDU
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_updatePassword
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest4
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleReleaseRequest
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleGetRequest
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNextDataBlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNormal
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_generateConfirmedServiceError
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequestWithList
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest2
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_reportError
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSnrmRequest
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_HandleAarqRequest
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_reset
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_clear2
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setPushSetup
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setData
</UL>

<P><STRONG><a name="[eb]"></a>bb_compare</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bytebuffer.o(.text.bb_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bb_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_AssociationLogicalName
</UL>

<P><STRONG><a name="[db]"></a>bb_get</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bytebuffer.o(.text.bb_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bb_get
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_decrypt
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_parseUserInformation
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getString2
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString2
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_parsePDU
</UL>

<P><STRONG><a name="[166]"></a>bb_getCapacity</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_getCapacity))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setBitString
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest4
</UL>

<P><STRONG><a name="[1cd]"></a>bb_getDouble</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bytebuffer.o(.text.bb_getDouble))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bb_getDouble
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDouble
</UL>

<P><STRONG><a name="[1ce]"></a>bb_getFloat</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_getFloat))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFloat
</UL>

<P><STRONG><a name="[129]"></a>bb_getInt16</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_getInt16))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDateTime
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInt16
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getInt16
</UL>

<P><STRONG><a name="[1cf]"></a>bb_getInt32</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_getInt32))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInt32
</UL>

<P><STRONG><a name="[1d0]"></a>bb_getInt64</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bytebuffer.o(.text.bb_getInt64))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bb_getInt64
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInt64
</UL>

<P><STRONG><a name="[12b]"></a>bb_getInt8</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_getInt8))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInt8
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getInt8
</UL>

<P><STRONG><a name="[e0]"></a>bb_getUInt16</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_getUInt16))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_parseUserInformation
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_parseSnrmUaResponse
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleGbt
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getMBusData
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getTcpData
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_checkWrapperAddress
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcData
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHDLCAddress
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDateTime
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDate
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUInt16
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt16
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNormal
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getTarget
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest2
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setLimiter
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setAssociationLogicalName
</UL>

<P><STRONG><a name="[1b8]"></a>bb_getUInt16ByIndex</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_getUInt16ByIndex))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcData
</UL>

<P><STRONG><a name="[1d8]"></a>bb_getUInt24</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bytebuffer.o(.text.bb_getUInt24))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bb_getUInt24
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
</UL>

<P><STRONG><a name="[f7]"></a>bb_getUInt32</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_getUInt32))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_decrypt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_AssociationLogicalName
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_parseSnrmUaResponse
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleExceptionResponse
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleDataNotification
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getMBusData
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHDLCAddress
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUInt32
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt32
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNextDataBlock
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest2
</UL>

<P><STRONG><a name="[1d6]"></a>bb_getUInt64</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bytebuffer.o(.text.bb_getUInt64))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bb_getUInt64
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUInt64
</UL>

<P><STRONG><a name="[d2]"></a>bb_getUInt8</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_getUInt8))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_decrypt
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_parseUserInformation
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_getConformanceFromArray
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_AssociationLogicalName
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_parseSnrmUaResponse
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleGeneralCiphering
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleExceptionResponse
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleConfirmedServiceError
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleGloDedRequest
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getPdu
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleGbt
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleDataNotification
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getMBusData
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcData
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHDLCAddress
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDateTime
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDate
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEnum
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUInt8
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBcd
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBool
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getDateTime
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getBoolean
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getEnum
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getVariant
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getIntegerFromBitString
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getTimeFromOctetString
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getDateFromOctetString
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getDateTimeFromOctetString
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getString2
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString2
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getInt16
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getInt8
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt32
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt16
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt8
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkArray
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkStructure
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_parsePDU
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_updateAuthentication
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_updatePassword
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_parseApplicationContextName
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleReleaseRequest
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleGetRequest
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNormal
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequestWithList
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getTarget
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest2
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setAssociationLogicalName
</UL>

<P><STRONG><a name="[165]"></a>bb_getUInt8ByIndex</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_getUInt8ByIndex))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcData
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_checkHdlcAddress
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHDLCAddress
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setAssociationLogicalName
</UL>

<P><STRONG><a name="[fd]"></a>bb_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_init))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_AssociationLogicalName
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cl_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequestWithList
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_reportError
</UL>

<P><STRONG><a name="[ec]"></a>bb_insert</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, bytebuffer.o(.text.bb_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bb_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_addLLCBytes
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getLNPdu
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_crypt
</UL>

<P><STRONG><a name="[ee]"></a>bb_insertUInt8</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, bytebuffer.o(.text.bb_insertUInt8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bb_insertUInt8
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_AssociationLogicalName
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
</UL>

<P><STRONG><a name="[1c8]"></a>bb_isAttached</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_isAttached))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_isPduFull
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest4
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNormal
</UL>

<P><STRONG><a name="[ef]"></a>bb_move</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bytebuffer.o(.text.bb_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bb_move
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleDataNotification
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getWrapperFrame
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getLNPdu
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getDataFromBlock
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcFrame
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_crypt
</UL>

<P><STRONG><a name="[c8]"></a>bb_set</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bytebuffer.o(.text.bb_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bb_set
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_generateApplicationContextName
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSapAssignment
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getLimiter
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getProfileGeneric
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getColumns
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getActionSchedule
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_secure
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setOctetString2
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setOctetString
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_crypt
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_generateAARE
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getBytes3
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest4
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNormal
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setData
</UL>

<P><STRONG><a name="[ce]"></a>bb_set2</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, bytebuffer.o(.text.bb_set2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bb_set2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_secure
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData3
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleDataNotification
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getWrapperFrame
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcFrame
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_generateAARE
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_parsePDU
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_updatePassword
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_reportError
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_addFrame
</UL>

<P><STRONG><a name="[215]"></a>bb_setDouble</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, bytebuffer.o(.text.bb_setDouble))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bb_setDouble
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getBytes3
</UL>

<P><STRONG><a name="[214]"></a>bb_setFloat</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_setFloat))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getBytes3
</UL>

<P><STRONG><a name="[173]"></a>bb_setInt16</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_setInt16))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setInt16
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getDateTime2
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getBytes3
</UL>

<P><STRONG><a name="[212]"></a>bb_setInt64</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, bytebuffer.o(.text.bb_setInt64))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bb_setInt64
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getBytes3
</UL>

<P><STRONG><a name="[167]"></a>bb_setInt8</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_setInt8))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getColumns
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setBoolean
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setEnum
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setInt8
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getBytes3
</UL>

<P><STRONG><a name="[c9]"></a>bb_setUInt16</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_setUInt16))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_setObjectCount
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSapAssignment
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getLimiter
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getProfileGeneric
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getColumns
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_appendHdlcParameter
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getWrapperFrame
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcFrame
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt16
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getDate
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getDateTime2
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_generateAARE
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_getUserInformation
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getBytes3
</UL>

<P><STRONG><a name="[f3]"></a>bb_setUInt32</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_setUInt32))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_setObjectCount
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getLimiter
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_secure
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getLNPdu
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcFrame
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt32
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_crypt
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getBytes3
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_generateDisconnectRequest
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSnrmRequest
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_generateExceptionResponse
</UL>

<P><STRONG><a name="[213]"></a>bb_setUInt64</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, bytebuffer.o(.text.bb_setUInt64))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bb_setUInt64
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getBytes3
</UL>

<P><STRONG><a name="[bb]"></a>bb_setUInt8</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_setUInt8))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_setObjectCount
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_setConformanceToArray
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_generateApplicationContextName
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSapAssignment
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getLimiter
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getProfileGeneric
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getColumns
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getAssociationLogicalName
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLNAccessRights
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getActionSchedule
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_appendHdlcParameter
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_secure
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_generateChallenge
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getLNPdu
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcFrame
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setBoolean
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setEnum
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setArray
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setStructure
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setVariant
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setInt16
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setInt8
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt32
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt16
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt8
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setOctetString2
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setDateTime
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setOctetString
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getTime
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setTimeAsOctetString
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setBitString
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getDate
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setDateAsOctetString
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getDateTime2
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setDateTimeAsOctetString
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_crypt
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_generateAARE
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_getUserInformation
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getBytes3
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleReleaseRequest
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNormal
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_generateConfirmedServiceError
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequestWithList
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getTarget
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_generateDisconnectRequest
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSnrmRequest
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_HandleAarqRequest
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_generateExceptionResponse
</UL>

<P><STRONG><a name="[ca]"></a>bb_setUInt8ByIndex</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_setUInt8ByIndex))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_crypt
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_generateAARE
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequestWithList
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_generateDisconnectRequest
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSnrmRequest
</UL>

<P><STRONG><a name="[f9]"></a>bb_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bytebuffer.o(.text.bb_size))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setBitString
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_decryptKey
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_reportError
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_addFrame
</UL>

<P><STRONG><a name="[f0]"></a>bb_zero</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bytebuffer.o(.text.bb_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = bb_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_secure
</UL>

<P><STRONG><a name="[1b6]"></a>checkFrame</STRONG> (Thumb, 316 bytes, Stack size 8 bytes, dlmssettings.o(.text.checkFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = checkFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcData
</UL>

<P><STRONG><a name="[f2]"></a>cip_crypt</STRONG> (Thumb, 1110 bytes, Stack size 72 bytes, ciphering.o(.text.cip_crypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_setObjectCount
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_attach
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_Encrypt
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_int
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_gcm_gctr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_gctr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_gcm_ghash
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_getGHash
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_insert
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt32
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_move
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_available
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_capacity
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8ByIndex
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_decrypt
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_encrypt
</UL>

<P><STRONG><a name="[df]"></a>cip_decrypt</STRONG> (Thumb, 646 bytes, Stack size 56 bytes, ciphering.o(.text.cip_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = cip_decrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_get
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_crypt
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt32
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_parseUserInformation
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleGeneralCiphering
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleGloDedRequest
</UL>

<P><STRONG><a name="[f8]"></a>cip_decryptKey</STRONG> (Thumb, 898 bytes, Stack size 96 bytes, ciphering.o(.text.cip_decryptKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = cip_decryptKey &rArr; gxaes_ecb_decrypt &rArr; InvCipher
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gxaes_ecb_decrypt
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_size
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_capacity
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_SecuritySetup
</UL>

<P><STRONG><a name="[d5]"></a>cip_encrypt</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, ciphering.o(.text.cip_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_crypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_secure
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getLNPdu
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_getUserInformation
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_generateExceptionResponse
</UL>

<P><STRONG><a name="[ff]"></a>cip_init</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, ciphering.o(.text.cip_init))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cl_init
</UL>

<P><STRONG><a name="[f4]"></a>cip_int</STRONG> (Thumb, 1200 bytes, Stack size 48 bytes, ciphering.o(.text.cip_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cip_int
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_crypt
</UL>

<P><STRONG><a name="[fc]"></a>cl_init</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, dlmssettings.o(.text.cl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cl_init &rArr; bb_addString &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_addString
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oa_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_init
</UL>

<P><STRONG><a name="[100]"></a>clock_updateDST</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gxobjects.o(.text.clock_updateDST))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = clock_updateDST &rArr; time_compare &rArr; time_compareWithDiff &rArr; time_toUnixTime2
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setClock
</UL>

<P><STRONG><a name="[102]"></a>cosem_checkArray</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, cosem.o(.text.cosem_checkArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cosem_checkArray &rArr; hlp_getObjectCount2 &rArr; bb_getUInt24
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_SecuritySetup
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCaptureObjects
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setMbusDiagnostic
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setMbusPortSetup
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setLimiter
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSecuritySetup
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKReportingSystemList
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setFSKMacCounters
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKPhyMacSetUp
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setPushSetup
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setActionSchedule
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSapAssignment
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setAssociationLogicalName
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setScriptTable
</UL>

<P><STRONG><a name="[103]"></a>cosem_checkStructure</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cosem.o(.text.cosem_checkStructure))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cosem_checkStructure &rArr; hlp_getObjectCount2 &rArr; bb_getUInt24
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_SecuritySetup
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_SapAssigment
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_AssociationLogicalName
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCaptureObjects
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setMbusDiagnostic
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setMbusPortSetup
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setLimiter
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSecuritySetup
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setFSKMacCounters
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKActiveInitiator
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKPhyMacSetUp
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setPushSetup
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setActionSchedule
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSapAssignment
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setAssociationLogicalName
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setScriptTable
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setProfileGeneric
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setRegister
</UL>

<P><STRONG><a name="[104]"></a>cosem_findObjectByLN</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cosem.o(.text.cosem_findObjectByLN))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cosem_findObjectByLN &rArr; oa_findByLN &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oa_findByLN
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCaptureObjects
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setLimiter
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setPushSetup
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setActionSchedule
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setAssociationLogicalName
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setScriptTable
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setProfileGeneric
</UL>

<P><STRONG><a name="[106]"></a>cosem_getActionSchedule</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, gxget.o(.text.cosem_getActionSchedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = cosem_getActionSchedule &rArr; cosem_setTimeAsOctetString &rArr; var_getTime &rArr; time_fromUnixTime2
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_setObjectCount
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getLogicalName
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setEnum
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setArray
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setStructure
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt16
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setTimeAsOctetString
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setDateAsOctetString
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
</UL>

<P><STRONG><a name="[10f]"></a>cosem_getAssociationLogicalName</STRONG> (Thumb, 566 bytes, Stack size 32 bytes, gxget.o(.text.cosem_getAssociationLogicalName))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = cosem_getAssociationLogicalName &rArr; getLNObjects &rArr; getLNAccessRights &rArr; cosem_setArray &rArr; hlp_setObjectCount
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_attach
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUserList
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLNObjects
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getLogicalName
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setEnum
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setStructure
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setInt8
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt16
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt8
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setOctetString2
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setOctetString
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setBitString
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
</UL>

<P><STRONG><a name="[117]"></a>cosem_getBoolean</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, cosem.o(.text.cosem_getBoolean))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cosem_getBoolean
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setLimiter
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setDisconnectControl
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKPhyMacSetUp
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setClock
</UL>

<P><STRONG><a name="[118]"></a>cosem_getClock</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, gxget.o(.text.cosem_getClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = cosem_getClock &rArr; cosem_setDateTimeAsOctetString &rArr; var_getDateTime2 &rArr; time_fromUnixTime2
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setBoolean
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setEnum
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setInt16
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setInt8
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt8
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setDateTimeAsOctetString
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
</UL>

<P><STRONG><a name="[11c]"></a>cosem_getDateFromOctetString</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, cosem.o(.text.cosem_getDateFromOctetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = cosem_getDateFromOctetString &rArr; dlms_getData &rArr;  dlms_getData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;di_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clear
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_Clock
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setActionSchedule
</UL>

<P><STRONG><a name="[120]"></a>cosem_getDateTime</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, cosem.o(.text.cosem_getDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = cosem_getDateTime &rArr; dlms_getData &rArr;  dlms_getData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;di_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setMbusDiagnostic
</UL>

<P><STRONG><a name="[121]"></a>cosem_getDateTimeFromOctetString</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, cosem.o(.text.cosem_getDateTimeFromOctetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = cosem_getDateTimeFromOctetString &rArr; dlms_getData &rArr;  dlms_getData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;di_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clear
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setMbusPortSetup
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setLimiter
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setPushSetup
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setClock
</UL>

<P><STRONG><a name="[122]"></a>cosem_getEnum</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, cosem.o(.text.cosem_getEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cosem_getEnum
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_SecuritySetup
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setMbusDiagnostic
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setMbusPortSetup
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setDisconnectControl
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSecuritySetup
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKPhyMacSetUp
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setPushSetup
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setIecHdlcSetup
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setActionSchedule
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setAssociationLogicalName
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setScriptTable
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setClock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setProfileGeneric
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setRegister
</UL>

<P><STRONG><a name="[123]"></a>cosem_getFSKMacCounters</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, gxget.o(.text.cosem_getFSKMacCounters))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cosem_getFSKMacCounters &rArr; cosem_setArray &rArr; hlp_setObjectCount
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setArray
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setStructure
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt32
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
</UL>

<P><STRONG><a name="[125]"></a>cosem_getIec8802LlcType2Setup</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, gxget.o(.text.cosem_getIec8802LlcType2Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cosem_getIec8802LlcType2Setup &rArr; cosem_setUInt16
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt16
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
</UL>

<P><STRONG><a name="[126]"></a>cosem_getIec8802LlcType3Setup</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, gxget.o(.text.cosem_getIec8802LlcType3Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cosem_getIec8802LlcType3Setup &rArr; cosem_setUInt16
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt16
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
</UL>

<P><STRONG><a name="[127]"></a>cosem_getIecHdlcSetup</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, gxget.o(.text.cosem_getIecHdlcSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cosem_getIecHdlcSetup &rArr; cosem_setEnum
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setEnum
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt16
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
</UL>

<P><STRONG><a name="[128]"></a>cosem_getInt16</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, cosem.o(.text.cosem_getInt16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cosem_getInt16
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setClock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setProfileGeneric
</UL>

<P><STRONG><a name="[12a]"></a>cosem_getInt8</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, cosem.o(.text.cosem_getInt8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cosem_getInt8
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCaptureObjects
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setLimiter
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setPushSetup
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setAssociationLogicalName
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setScriptTable
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setClock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setProfileGeneric
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setRegister
</UL>

<P><STRONG><a name="[12c]"></a>cosem_getIntegerFromBitString</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, cosem.o(.text.cosem_getIntegerFromBitString))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = cosem_getIntegerFromBitString &rArr; ba_toInteger &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ba_toInteger
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ba_attach
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ba_getByteCount
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setAssociationLogicalName
</UL>

<P><STRONG><a name="[12e]"></a>cosem_getLimiter</STRONG> (Thumb, 832 bytes, Stack size 32 bytes, gxget.o(.text.cosem_getLimiter))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = cosem_getLimiter &rArr; cosem_setVariant &rArr; dlms_setData &rArr; var_getBytes2 &rArr; var_getBytes3 &rArr;  var_getBytes3 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt16
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getLogicalName
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setBoolean
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setArray
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setVariant
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt32
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setDateTimeAsOctetString
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex2
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
</UL>

<P><STRONG><a name="[131]"></a>cosem_getMbusDiagnostic</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, gxget.o(.text.cosem_getMbusDiagnostic))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = cosem_getMbusDiagnostic &rArr; cosem_setDateTime &rArr; var_getDateTime2 &rArr; time_fromUnixTime2
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setEnum
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setArray
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setStructure
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt32
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt8
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setDateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
</UL>

<P><STRONG><a name="[134]"></a>cosem_getMbusPortSetup</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, gxget.o(.text.cosem_getMbusPortSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = cosem_getMbusPortSetup &rArr; cosem_setDateTimeAsOctetString &rArr; var_getDateTime2 &rArr; time_fromUnixTime2
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setEnum
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setArray
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setStructure
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt32
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt16
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt8
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setOctetString2
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setDateTimeAsOctetString
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
</UL>

<P><STRONG><a name="[14a]"></a>cosem_getObjectSize</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, cosem.o(.text.cosem_getObjectSize))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_init4
</UL>

<P><STRONG><a name="[135]"></a>cosem_getOctetString</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, cosem.o(.text.cosem_getOctetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cosem_getOctetString &rArr; hlp_getObjectCount2 &rArr; bb_getUInt24
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set2
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_SecuritySetup
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_AssociationLogicalName
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSecuritySetup
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKActiveInitiator
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setPushSetup
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setAssociationLogicalName
</UL>

<P><STRONG><a name="[136]"></a>cosem_getOctetString2</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, cosem.o(.text.cosem_getOctetString2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = cosem_getOctetString2 &rArr; hlp_getObjectCount2 &rArr; bb_getUInt24
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_get
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_SapAssigment
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCaptureObjects
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setMbusPortSetup
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setLimiter
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKReportingSystemList
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setPushSetup
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setActionSchedule
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSapAssignment
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setAssociationLogicalName
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setScriptTable
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setProfileGeneric
</UL>

<P><STRONG><a name="[137]"></a>cosem_getProfileGeneric</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, gxget.o(.text.cosem_getProfileGeneric))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cosem_getProfileGeneric &rArr; getColumns &rArr; cosem_setArray &rArr; hlp_setObjectCount
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt16
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getColumns
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setEnum
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
</UL>

<P><STRONG><a name="[139]"></a>cosem_getPushSetup</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, gxget.o(.text.cosem_getPushSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = cosem_getPushSetup &rArr; cosem_setDateTimeAsOctetString &rArr; var_getDateTime2 &rArr; time_fromUnixTime2
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setEnum
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setArray
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setStructure
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setInt8
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt16
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt8
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setOctetString2
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setOctetString
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setDateTimeAsOctetString
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
</UL>

<P><STRONG><a name="[13a]"></a>cosem_getRegister</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, gxget.o(.text.cosem_getRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = cosem_getRegister &rArr; var_copy &rArr; var_getBytes3 &rArr;  var_getBytes3 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_copy
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setEnum
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setStructure
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setVariant
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
</UL>

<P><STRONG><a name="[13c]"></a>cosem_getSFSKPhyMacSetUp</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, gxget.o(.text.cosem_getSFSKPhyMacSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cosem_getSFSKPhyMacSetUp &rArr; cosem_setArray &rArr; hlp_setObjectCount
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setBoolean
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setEnum
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setArray
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setStructure
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt32
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt16
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
</UL>

<P><STRONG><a name="[13d]"></a>cosem_getSapAssignment</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, gxget.o(.text.cosem_getSapAssignment))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cosem_getSapAssignment &rArr; cosem_setArray &rArr; hlp_setObjectCount
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt16
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_setObjectCount
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setArray
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
</UL>

<P><STRONG><a name="[13e]"></a>cosem_getScriptTable</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, gxget.o(.text.cosem_getScriptTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = cosem_getScriptTable &rArr; cosem_setVariant &rArr; dlms_setData &rArr; var_getBytes2 &rArr; var_getBytes3 &rArr;  var_getBytes3 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_getLogicalName
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setEnum
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setArray
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setStructure
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setVariant
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setInt8
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt16
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setOctetString2
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
</UL>

<P><STRONG><a name="[13f]"></a>cosem_getSecuritySetup</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, gxget.o(.text.cosem_getSecuritySetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cosem_getSecuritySetup &rArr; cosem_setArray &rArr; hlp_setObjectCount
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setEnum
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setArray
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setStructure
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setOctetString2
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setOctetString
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
</UL>

<P><STRONG><a name="[140]"></a>cosem_getString2</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, cosem.o(.text.cosem_getString2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = cosem_getString2 &rArr; hlp_getObjectCount2 &rArr; bb_getUInt24
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_get
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_AssociationLogicalName
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSecuritySetup
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setAssociationLogicalName
</UL>

<P><STRONG><a name="[141]"></a>cosem_getTimeFromOctetString</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, cosem.o(.text.cosem_getTimeFromOctetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = cosem_getTimeFromOctetString &rArr; dlms_getData &rArr;  dlms_getData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;di_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clear
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setActionSchedule
</UL>

<P><STRONG><a name="[142]"></a>cosem_getUInt16</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, cosem.o(.text.cosem_getUInt16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cosem_getUInt16
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_SapAssigment
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCaptureObjects
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setMbusPortSetup
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setLimiter
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setIec8802LlcType3Setup
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setIec8802LlcType2Setup
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setIec8802LlcType1Setup
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setFSKMacCounters
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKMacSynchronizationTimeouts
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKActiveInitiator
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKPhyMacSetUp
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setPushSetup
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setIecHdlcSetup
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setActionSchedule
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSapAssignment
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setAssociationLogicalName
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setScriptTable
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setProfileGeneric
</UL>

<P><STRONG><a name="[143]"></a>cosem_getUInt32</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, cosem.o(.text.cosem_getUInt32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cosem_getUInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setMbusDiagnostic
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setMbusPortSetup
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setLimiter
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setFSKMacCounters
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKPhyMacSetUp
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setProfileGeneric
</UL>

<P><STRONG><a name="[144]"></a>cosem_getUInt8</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, cosem.o(.text.cosem_getUInt8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cosem_getUInt8
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_AssociationLogicalName
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setMbusDiagnostic
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setMbusPortSetup
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSecuritySetup
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setIec8802LlcType3Setup
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setIec8802LlcType2Setup
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKActiveInitiator
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKPhyMacSetUp
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setPushSetup
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setIecHdlcSetup
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setAssociationLogicalName
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setClock
</UL>

<P><STRONG><a name="[145]"></a>cosem_getValue</STRONG> (Thumb, 804 bytes, Stack size 32 bytes, gxget.o(.text.cosem_getValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = cosem_getValue &rArr; cosem_getAssociationLogicalName &rArr; getLNObjects &rArr; getLNAccessRights &rArr; cosem_setArray &rArr; hlp_setObjectCount
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getIec8802LlcType3Setup
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getIec8802LlcType2Setup
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getFSKMacCounters
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSFSKPhyMacSetUp
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getPushSetup
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getMbusPortSetup
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getMbusDiagnostic
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getScriptTable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSapAssignment
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getLimiter
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getProfileGeneric
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getIecHdlcSetup
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSecuritySetup
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getAssociationLogicalName
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getActionSchedule
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getClock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getRegister
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_copy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setBoolean
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setEnum
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setArray
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setStructure
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setVariant
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt16
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt8
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setOctetString
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNextDataBlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNormal
</UL>

<P><STRONG><a name="[146]"></a>cosem_getVariant</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, cosem.o(.text.cosem_getVariant))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = cosem_getVariant &rArr; dlms_getData &rArr;  dlms_getData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_clear
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;di_init
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setLimiter
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setScriptTable
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setRegister
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setData
</UL>

<P><STRONG><a name="[148]"></a>cosem_init2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cosem.o(.text.cosem_init2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = cosem_init2 &rArr; cosem_init4
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_init4
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createObjects
</UL>

<P><STRONG><a name="[149]"></a>cosem_init4</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, cosem.o(.text.cosem_init4))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = cosem_init4
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getObjectSize
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createObjects
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_init2
</UL>

<P><STRONG><a name="[14b]"></a>cosem_invoke</STRONG> (Thumb, 352 bytes, Stack size 200 bytes, gxinvoke.o(.text.cosem_invoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = cosem_invoke &rArr; invoke_AssociationLogicalName &rArr; dlms_secure &rArr; cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_attach
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_postGet
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_preGet
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_Clock
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_empty
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ve_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_ScriptTable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_SecuritySetup
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_SapAssigment
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_AssociationLogicalName
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_methodCount
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_clear
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_ScriptTable
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
</UL>

<P><STRONG><a name="[158]"></a>cosem_setActionSchedule</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, gxsetignoremalloc.o(.text.cosem_setActionSchedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = cosem_setActionSchedule &rArr; cosem_getTimeFromOctetString &rArr; dlms_getData &rArr;  dlms_getData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_clear
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_getSeconds
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_addSeconds
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_getMinutes
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_addMinutes
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_getHours
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_addHours
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clearTime
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_clearDate
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_findObjectByLN
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getCapacity
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getEnum
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getTimeFromOctetString
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getDateFromOctetString
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString2
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt16
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkArray
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkStructure
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex2
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[10a]"></a>cosem_setArray</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cosem.o(.text.cosem_setArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cosem_setArray &rArr; hlp_setObjectCount
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_setObjectCount
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getFSKMacCounters
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSFSKPhyMacSetUp
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getPushSetup
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getMbusPortSetup
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getMbusDiagnostic
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getScriptTable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSapAssignment
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getLimiter
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getColumns
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSecuritySetup
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUserList
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLNObjects
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLNAccessRights
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getActionSchedule
</UL>

<P><STRONG><a name="[163]"></a>cosem_setAssociationLogicalName</STRONG> (Thumb, 1272 bytes, Stack size 32 bytes, gxsetignoremalloc.o(.text.cosem_setAssociationLogicalName))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = cosem_setAssociationLogicalName &rArr; cosem_getIntegerFromBitString &rArr; ba_toInteger &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oa_empty
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_findObjectByLN
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getCapacity
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getEnum
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getIntegerFromBitString
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getString2
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString2
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getInt8
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt16
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt8
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkArray
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkStructure
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex2
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8ByIndex
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[111]"></a>cosem_setBitString</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, cosem.o(.text.cosem_setBitString))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cosem_setBitString &rArr; ba_setByIndex &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_setObjectCount
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_size
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getCapacity
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ba_setByIndex
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ba_attach
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ba_getByteCount
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_capacity
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getAssociationLogicalName
</UL>

<P><STRONG><a name="[11b]"></a>cosem_setBoolean</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cosem.o(.text.cosem_setBoolean))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cosem_setBoolean
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSFSKPhyMacSetUp
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getLimiter
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getClock
</UL>

<P><STRONG><a name="[168]"></a>cosem_setClock</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, gxsetignoremalloc.o(.text.cosem_setClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = cosem_setClock &rArr; cosem_getDateTimeFromOctetString &rArr; dlms_getData &rArr;  dlms_getData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_updateDST
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_toUTC
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getBoolean
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getEnum
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getDateTimeFromOctetString
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getInt16
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getInt8
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[16a]"></a>cosem_setData</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, gxsetignoremalloc.o(.text.cosem_setData))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = cosem_setData &rArr; cosem_getVariant &rArr; dlms_getData &rArr;  dlms_getData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_attach
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getVariant
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[10e]"></a>cosem_setDateAsOctetString</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cosem.o(.text.cosem_setDateAsOctetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cosem_setDateAsOctetString &rArr; var_getDate &rArr; time_fromUnixTime2
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getDate
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getActionSchedule
</UL>

<P><STRONG><a name="[133]"></a>cosem_setDateTime</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cosem.o(.text.cosem_setDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = cosem_setDateTime &rArr; var_getDateTime2 &rArr; time_fromUnixTime2
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getDateTime2
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getMbusDiagnostic
</UL>

<P><STRONG><a name="[119]"></a>cosem_setDateTimeAsOctetString</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cosem.o(.text.cosem_setDateTimeAsOctetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = cosem_setDateTimeAsOctetString &rArr; var_getDateTime2 &rArr; time_fromUnixTime2
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getDateTime2
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getPushSetup
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getMbusPortSetup
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getLimiter
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getClock
</UL>

<P><STRONG><a name="[16d]"></a>cosem_setDisconnectControl</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, gxsetignoremalloc.o(.text.cosem_setDisconnectControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cosem_setDisconnectControl &rArr; cosem_getBoolean
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getBoolean
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getEnum
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[10b]"></a>cosem_setEnum</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cosem.o(.text.cosem_setEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cosem_setEnum
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSFSKPhyMacSetUp
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getPushSetup
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getMbusPortSetup
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getMbusDiagnostic
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getScriptTable
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getProfileGeneric
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getIecHdlcSetup
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSecuritySetup
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getAssociationLogicalName
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLNAccessRights
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getActionSchedule
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getClock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getRegister
</UL>

<P><STRONG><a name="[16e]"></a>cosem_setFSKMacCounters</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, gxsetignoremalloc.o(.text.cosem_setFSKMacCounters))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cosem_setFSKMacCounters &rArr; cosem_checkArray &rArr; hlp_getObjectCount2 &rArr; bb_getUInt24
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_clear
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getCapacity
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt32
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt16
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkArray
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkStructure
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex2
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[16f]"></a>cosem_setIec8802LlcType1Setup</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gxsetignoremalloc.o(.text.cosem_setIec8802LlcType1Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cosem_setIec8802LlcType1Setup &rArr; cosem_getUInt16
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[170]"></a>cosem_setIec8802LlcType2Setup</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, gxsetignoremalloc.o(.text.cosem_setIec8802LlcType2Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cosem_setIec8802LlcType2Setup &rArr; cosem_getUInt16
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt16
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[171]"></a>cosem_setIec8802LlcType3Setup</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, gxsetignoremalloc.o(.text.cosem_setIec8802LlcType3Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cosem_setIec8802LlcType3Setup &rArr; cosem_getUInt16
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt16
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[172]"></a>cosem_setIecHdlcSetup</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, gxsetignoremalloc.o(.text.cosem_setIecHdlcSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cosem_setIecHdlcSetup &rArr; cosem_getEnum
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getEnum
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt16
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[11a]"></a>cosem_setInt16</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cosem.o(.text.cosem_setInt16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cosem_setInt16
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getClock
</UL>

<P><STRONG><a name="[113]"></a>cosem_setInt8</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cosem.o(.text.cosem_setInt8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cosem_setInt8
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getPushSetup
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getScriptTable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getAssociationLogicalName
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLNAccessRights
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getClock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getRegister
</UL>

<P><STRONG><a name="[174]"></a>cosem_setLimiter</STRONG> (Thumb, 526 bytes, Stack size 40 bytes, gxsetignoremalloc.o(.text.cosem_setLimiter))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = cosem_setLimiter &rArr; cosem_getDateTimeFromOctetString &rArr; dlms_getData &rArr;  dlms_getData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_findObjectByLN
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getCapacity
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getBoolean
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getVariant
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getDateTimeFromOctetString
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString2
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getInt8
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt32
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt16
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkArray
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkStructure
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[175]"></a>cosem_setMbusDiagnostic</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, gxsetignoremalloc.o(.text.cosem_setMbusDiagnostic))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = cosem_setMbusDiagnostic &rArr; cosem_getDateTime &rArr; dlms_getData &rArr;  dlms_getData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getCapacity
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getDateTime
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getEnum
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt32
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt8
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkArray
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkStructure
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex2
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[176]"></a>cosem_setMbusPortSetup</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, gxsetignoremalloc.o(.text.cosem_setMbusPortSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = cosem_setMbusPortSetup &rArr; cosem_getDateTimeFromOctetString &rArr; dlms_getData &rArr;  dlms_getData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_clearKeyValuePair
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getCapacity
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getEnum
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getDateTimeFromOctetString
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString2
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt32
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt16
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt8
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkArray
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkStructure
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex2
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[114]"></a>cosem_setOctetString</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cosem.o(.text.cosem_setOctetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cosem_setOctetString &rArr; bb_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getPushSetup
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSecuritySetup
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getAssociationLogicalName
</UL>

<P><STRONG><a name="[115]"></a>cosem_setOctetString2</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, cosem.o(.text.cosem_setOctetString2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cosem_setOctetString2 &rArr; bb_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getPushSetup
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getMbusPortSetup
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getScriptTable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSecuritySetup
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getAssociationLogicalName
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUserList
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLNObjects
</UL>

<P><STRONG><a name="[178]"></a>cosem_setProfileGeneric</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, gxsetignoremalloc.o(.text.cosem_setProfileGeneric))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = cosem_setProfileGeneric &rArr; setCaptureObjects &rArr; cosem_findObjectByLN &rArr; oa_findByLN &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_findObjectByLN
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getEnum
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString2
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getInt16
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getInt8
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt32
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt16
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkStructure
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCaptureObjects
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[17a]"></a>cosem_setPushSetup</STRONG> (Thumb, 512 bytes, Stack size 56 bytes, gxsetignoremalloc.o(.text.cosem_setPushSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = cosem_setPushSetup &rArr; cosem_getDateTimeFromOctetString &rArr; dlms_getData &rArr;  dlms_getData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_clearPushObjectList
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_findObjectByLN
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getCapacity
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getEnum
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getDateTimeFromOctetString
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString2
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getInt8
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt16
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt8
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkArray
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkStructure
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex2
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[17c]"></a>cosem_setRegister</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, gxsetignoremalloc.o(.text.cosem_setRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = cosem_setRegister &rArr; cosem_getVariant &rArr; dlms_getData &rArr;  dlms_getData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getEnum
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getVariant
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getInt8
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkStructure
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[17d]"></a>cosem_setSFSKActiveInitiator</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gxsetignoremalloc.o(.text.cosem_setSFSKActiveInitiator))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cosem_setSFSKActiveInitiator &rArr; cosem_getOctetString &rArr; hlp_getObjectCount2 &rArr; bb_getUInt24
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt16
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt8
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkStructure
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[17e]"></a>cosem_setSFSKMacSynchronizationTimeouts</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gxsetignoremalloc.o(.text.cosem_setSFSKMacSynchronizationTimeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cosem_setSFSKMacSynchronizationTimeouts &rArr; cosem_getUInt16
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[17f]"></a>cosem_setSFSKPhyMacSetUp</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, gxsetignoremalloc.o(.text.cosem_setSFSKPhyMacSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cosem_setSFSKPhyMacSetUp &rArr; cosem_checkArray &rArr; hlp_getObjectCount2 &rArr; bb_getUInt24
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_clear
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getCapacity
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getBoolean
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getEnum
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt32
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt16
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt8
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkArray
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkStructure
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex2
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[180]"></a>cosem_setSFSKReportingSystemList</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, gxsetignoremalloc.o(.text.cosem_setSFSKReportingSystemList))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = cosem_setSFSKReportingSystemList &rArr; cosem_getOctetString2 &rArr; hlp_getObjectCount2 &rArr; bb_getUInt24
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_clearByteBufferList
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getCapacity
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString2
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkArray
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex2
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[182]"></a>cosem_setSapAssignment</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, gxsetignoremalloc.o(.text.cosem_setSapAssignment))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = cosem_setSapAssignment &rArr; cosem_getOctetString2 &rArr; hlp_getObjectCount2 &rArr; bb_getUInt24
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_clearSapList
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getCapacity
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString2
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt16
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkArray
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkStructure
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex2
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[184]"></a>cosem_setScriptTable</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, gxsetignoremalloc.o(.text.cosem_setScriptTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = cosem_setScriptTable &rArr; cosem_getVariant &rArr; dlms_getData &rArr;  dlms_getData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_clearScriptTable
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_findObjectByLN
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getCapacity
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getEnum
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getVariant
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString2
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getInt8
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt16
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkArray
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkStructure
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex2
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[186]"></a>cosem_setSecuritySetup</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, gxsetignoremalloc.o(.text.cosem_setSecuritySetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = cosem_setSecuritySetup &rArr; cosem_getString2 &rArr; hlp_getObjectCount2 &rArr; bb_getUInt24
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_clearCertificateInfo
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getCapacity
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getEnum
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getString2
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt8
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkArray
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkStructure
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex2
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
</UL>

<P><STRONG><a name="[107]"></a>cosem_setStructure</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cosem.o(.text.cosem_setStructure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cosem_setStructure &rArr; hlp_setObjectCount
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_setObjectCount
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getFSKMacCounters
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSFSKPhyMacSetUp
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getPushSetup
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getMbusPortSetup
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getMbusDiagnostic
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getScriptTable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSecuritySetup
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getAssociationLogicalName
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUserList
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLNObjects
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLNAccessRights
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getActionSchedule
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getRegister
</UL>

<P><STRONG><a name="[10d]"></a>cosem_setTimeAsOctetString</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cosem.o(.text.cosem_setTimeAsOctetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cosem_setTimeAsOctetString &rArr; var_getTime &rArr; time_fromUnixTime2
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getTime
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getActionSchedule
</UL>

<P><STRONG><a name="[109]"></a>cosem_setUInt16</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cosem.o(.text.cosem_setUInt16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cosem_setUInt16
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt16
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getIec8802LlcType3Setup
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getIec8802LlcType2Setup
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getFSKMacCounters
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSFSKPhyMacSetUp
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getPushSetup
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getMbusPortSetup
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getScriptTable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getIecHdlcSetup
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getAssociationLogicalName
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLNObjects
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getActionSchedule
</UL>

<P><STRONG><a name="[124]"></a>cosem_setUInt32</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cosem.o(.text.cosem_setUInt32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cosem_setUInt32
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getFSKMacCounters
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSFSKPhyMacSetUp
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getMbusPortSetup
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getMbusDiagnostic
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getLimiter
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getProfileGeneric
</UL>

<P><STRONG><a name="[112]"></a>cosem_setUInt8</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, cosem.o(.text.cosem_setUInt8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cosem_setUInt8
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getIec8802LlcType3Setup
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getIec8802LlcType2Setup
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSFSKPhyMacSetUp
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getPushSetup
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getMbusPortSetup
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getMbusDiagnostic
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getIecHdlcSetup
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getAssociationLogicalName
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUserList
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLNObjects
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getClock
</UL>

<P><STRONG><a name="[189]"></a>cosem_setValue</STRONG> (Thumb, 518 bytes, Stack size 8 bytes, gxset.o(.text.cosem_setValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = cosem_setValue &rArr; cosem_setPushSetup &rArr; cosem_getDateTimeFromOctetString &rArr; dlms_getData &rArr;  dlms_getData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString2
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setMbusDiagnostic
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setMbusPortSetup
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setLimiter
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setDisconnectControl
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSecuritySetup
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setIec8802LlcType3Setup
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setIec8802LlcType2Setup
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setIec8802LlcType1Setup
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKReportingSystemList
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setFSKMacCounters
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKMacSynchronizationTimeouts
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKActiveInitiator
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKPhyMacSetUp
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setPushSetup
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setIecHdlcSetup
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setActionSchedule
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSapAssignment
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setAssociationLogicalName
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setScriptTable
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setClock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setProfileGeneric
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setRegister
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setData
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_ScriptTable
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequestWithList
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest2
</UL>

<P><STRONG><a name="[12f]"></a>cosem_setVariant</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cosem.o(.text.cosem_setVariant))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = cosem_setVariant &rArr; dlms_setData &rArr; var_getBytes2 &rArr; var_getBytes3 &rArr;  var_getBytes3 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_setData
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getScriptTable
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getLimiter
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getRegister
</UL>

<P><STRONG><a name="[18b]"></a>createObjects</STRONG> (Thumb, 436 bytes, Stack size 72 bytes, main.o(.text.createObjects))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = createObjects &rArr; GXTRACE &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_init4
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_addString
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oa_attach
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_init2
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXTRACE
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>di_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, datainfo.o(.text.di_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleDataNotification
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getValueFromData
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getDateTime
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getVariant
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getTimeFromOctetString
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getDateFromOctetString
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getDateTimeFromOctetString
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequestWithList
</UL>

<P><STRONG><a name="[18e]"></a>dlms_addFrame</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, server.o(.text.dlms_addFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dlms_addFrame &rArr; dlms_getHdlcFrame &rArr; bb_move
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getWrapperFrame
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcFrame
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_size
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set2
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest4
</UL>

<P><STRONG><a name="[191]"></a>dlms_addLLCBytes</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dlms.o(.text.dlms_addLLCBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dlms_addLLCBytes &rArr; bb_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleReleaseRequest
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_generateConfirmedServiceError
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_HandleAarqRequest
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_generateExceptionResponse
</UL>

<P><STRONG><a name="[192]"></a>dlms_appendHdlcParameter</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dlms.o(.text.dlms_appendHdlcParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dlms_appendHdlcParameter
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt16
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_generateDisconnectRequest
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSnrmRequest
</UL>

<P><STRONG><a name="[193]"></a>dlms_checkHdlcAddress</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, dlms.o(.text.dlms_checkHdlcAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dlms_checkHdlcAddress &rArr; dlms_getHDLCAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHDLCAddress
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8ByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcData
</UL>

<P><STRONG><a name="[195]"></a>dlms_checkLLCBytes</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, dlms.o(.text.dlms_checkLLCBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dlms_checkLLCBytes &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcData
</UL>

<P><STRONG><a name="[196]"></a>dlms_checkWrapperAddress</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, dlms.o(.text.dlms_checkWrapperAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dlms_checkWrapperAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getTcpData
</UL>

<P><STRONG><a name="[197]"></a>dlms_generateChallenge</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, dlms.o(.text.dlms_generateChallenge))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dlms_generateChallenge
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_HandleAarqRequest
</UL>

<P><STRONG><a name="[11f]"></a>dlms_getData</STRONG> (Thumb, 650 bytes, Stack size 48 bytes, dlms.o(.text.dlms_getData))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + In Cycle
<LI>Call Chain = dlms_getData &rArr;  dlms_getData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;va_getByIndex
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;va_getCapacity
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDateTime
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDate
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFloat
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDouble
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEnum
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUInt64
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInt64
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUInt16
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInt8
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInt16
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUInt8
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBcd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOctetString
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getString
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInt32
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUInt32
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBitString
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBool
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;di_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleDataNotification
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getValueFromData
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getDateTime
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getVariant
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getTimeFromOctetString
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getDateFromOctetString
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getDateTimeFromOctetString
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequestWithList
</UL>

<P><STRONG><a name="[1ae]"></a>dlms_getData2</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, dlms.o(.text.dlms_getData2))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = dlms_getData2 &rArr; dlms_getData3 &rArr; dlms_getPdu &rArr;  dlms_getPdu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData3
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest4
</UL>

<P><STRONG><a name="[1af]"></a>dlms_getData3</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, dlms.o(.text.dlms_getData3))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = dlms_getData3 &rArr; dlms_getPdu &rArr;  dlms_getPdu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getPdu
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getMBusData
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getTcpData
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcData
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_capacity
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set2
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData2
</UL>

<P><STRONG><a name="[1b4]"></a>dlms_getDataFromBlock</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dlms.o(.text.dlms_getDataFromBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dlms_getDataFromBlock &rArr; bb_move
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_move
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleGbt
</UL>

<P><STRONG><a name="[1b5]"></a>dlms_getGloMessage</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, dlms.o(.text.dlms_getGloMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dlms_getGloMessage &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getLNPdu
</UL>

<P><STRONG><a name="[194]"></a>dlms_getHDLCAddress</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, dlms.o(.text.dlms_getHDLCAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dlms_getHDLCAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt32
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8ByIndex
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_checkHdlcAddress
</UL>

<P><STRONG><a name="[1b0]"></a>dlms_getHdlcData</STRONG> (Thumb, 1262 bytes, Stack size 72 bytes, dlms.o(.text.dlms_getHdlcData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + In Cycle
<LI>Call Chain = dlms_getHdlcData &rArr;  dlms_getHdlcData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_isTarget
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFrame
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcData
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_checkHdlcAddress
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_checkLLCBytes
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt16ByIndex
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8ByIndex
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData3
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcData
</UL>

<P><STRONG><a name="[18f]"></a>dlms_getHdlcFrame</STRONG> (Thumb, 1234 bytes, Stack size 72 bytes, dlms.o(.text.dlms_getHdlcFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dlms_getHdlcFrame &rArr; bb_move
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt16
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_attach
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextSend
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt32
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_move
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_available
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_capacity
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set2
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest4
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_reportError
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_addFrame
</UL>

<P><STRONG><a name="[1ba]"></a>dlms_getLNPdu</STRONG> (Thumb, 1198 bytes, Stack size 112 bytes, dlms.o(.text.dlms_getLNPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = dlms_getLNPdu &rArr; cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_setObjectCount
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_attach
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_initUnix
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getBytes2
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCountSizeInBytes
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getGloMessage
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_insert
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt32
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_move
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_available
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_encrypt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleGetRequest
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNextDataBlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNormal
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_reportError
</UL>

<P><STRONG><a name="[1b2]"></a>dlms_getMBusData</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, dlms.o(.text.dlms_getMBusData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dlms_getMBusData
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt32
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData3
</UL>

<P><STRONG><a name="[1b3]"></a>dlms_getPdu</STRONG> (Thumb, 800 bytes, Stack size 24 bytes, dlms.o(.text.dlms_getPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = dlms_getPdu &rArr;  dlms_getPdu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleGeneralCiphering
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleExceptionResponse
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleConfirmedServiceError
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleGloDedRequest
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getPdu
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleGbt
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleDataNotification
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_available
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData3
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleGeneralCiphering
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getPdu
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleGbt
</UL>

<P><STRONG><a name="[1b1]"></a>dlms_getTcpData</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, dlms.o(.text.dlms_getTcpData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dlms_getTcpData &rArr; dlms_checkWrapperAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_checkWrapperAddress
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData3
</UL>

<P><STRONG><a name="[1c4]"></a>dlms_getValueFromData</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, dlms.o(.text.dlms_getValueFromData))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = dlms_getValueFromData &rArr; dlms_getData &rArr;  dlms_getData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetBlockIndex
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_clear
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;di_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleGbt
</UL>

<P><STRONG><a name="[190]"></a>dlms_getWrapperFrame</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, dlms.o(.text.dlms_getWrapperFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dlms_getWrapperFrame &rArr; bb_move
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt16
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_move
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_capacity
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set2
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_reportError
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_addFrame
</UL>

<P><STRONG><a name="[1c0]"></a>dlms_handleConfirmedServiceError</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, dlms.o(.text.dlms_handleConfirmedServiceError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dlms_handleConfirmedServiceError
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getPdu
</UL>

<P><STRONG><a name="[1c1]"></a>dlms_handleDataNotification</STRONG> (Thumb, 196 bytes, Stack size 96 bytes, dlms.o(.text.dlms_handleDataNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = dlms_handleDataNotification &rArr; dlms_getData &rArr;  dlms_getData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_attach
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;di_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt32
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_move
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set2
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getPdu
</UL>

<P><STRONG><a name="[1c2]"></a>dlms_handleExceptionResponse</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, dlms.o(.text.dlms_handleExceptionResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dlms_handleExceptionResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt32
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_available
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getPdu
</UL>

<P><STRONG><a name="[1be]"></a>dlms_handleGbt</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, dlms.o(.text.dlms_handleGbt))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + In Cycle
<LI>Call Chain = dlms_handleGbt &rArr;  dlms_getPdu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getPdu
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getValueFromData
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getDataFromBlock
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getPdu
</UL>

<P><STRONG><a name="[1c3]"></a>dlms_handleGeneralCiphering</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, dlms.o(.text.dlms_handleGeneralCiphering))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = dlms_handleGeneralCiphering &rArr;  dlms_getPdu (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_decrypt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getPdu
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getPdu
</UL>

<P><STRONG><a name="[1bf]"></a>dlms_handleGloDedRequest</STRONG> (Thumb, 392 bytes, Stack size 64 bytes, dlms.o(.text.dlms_handleGloDedRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = dlms_handleGloDedRequest &rArr; cip_decrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_decrypt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_connected
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_isTarget
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getPdu
</UL>

<P><STRONG><a name="[1c7]"></a>dlms_isPduFull</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dlms.o(.text.dlms_isPduFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dlms_isPduFull
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_isAttached
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getColumns
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLNObjects
</UL>

<P><STRONG><a name="[1c9]"></a>dlms_parseSnrmUaResponse</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, dlms.o(.text.dlms_parseSnrmUaResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dlms_parseSnrmUaResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt32
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSnrmRequest
</UL>

<P><STRONG><a name="[1ca]"></a>dlms_secure</STRONG> (Thumb, 390 bytes, Stack size 88 bytes, dlms.o(.text.dlms_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = dlms_secure &rArr; cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_attach
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gxaes_ecb_encrypt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt32
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_zero
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_capacity
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_encrypt
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set2
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_AssociationLogicalName
</UL>

<P><STRONG><a name="[18a]"></a>dlms_setData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dlms.o(.text.dlms_setData))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dlms_setData &rArr; var_getBytes2 &rArr; var_getBytes3 &rArr;  var_getBytes3 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getBytes2
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setVariant
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNextDataBlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNormal
</UL>

<P><STRONG><a name="[1cc]"></a>dlms_useDedicatedKey</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dlms.o(.text.dlms_useDedicatedKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dlms_useDedicatedKey &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_generateExceptionResponse
</UL>

<P><STRONG><a name="[1fb]"></a>dlms_useHdlc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dlms.o(.text.dlms_useHdlc))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
</UL>

<P><STRONG><a name="[19f]"></a>getBcd</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, dlms.o(.text.getBcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = getBcd &rArr; hlp_getObjectCount2 &rArr; bb_getUInt24
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
</UL>

<P><STRONG><a name="[138]"></a>getColumns</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, gxget.o(.text.getColumns))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = getColumns &rArr; cosem_setArray &rArr; hlp_setObjectCount
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt16
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_isPduFull
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setArray
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getProfileGeneric
</UL>

<P><STRONG><a name="[1aa]"></a>getDate</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, dlms.o(.text.getDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = getDate &rArr; time_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
</UL>

<P><STRONG><a name="[1a9]"></a>getDateTime</STRONG> (Thumb, 424 bytes, Stack size 64 bytes, dlms.o(.text.getDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = getDateTime &rArr; time_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getInt16
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
</UL>

<P><STRONG><a name="[1a8]"></a>getDouble</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dlms.o(.text.getDouble))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getDouble &rArr; bb_getDouble
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getDouble
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
</UL>

<P><STRONG><a name="[1a6]"></a>getEnum</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dlms.o(.text.getEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getEnum
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
</UL>

<P><STRONG><a name="[1a7]"></a>getFloat</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dlms.o(.text.getFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getFloat
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getFloat
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
</UL>

<P><STRONG><a name="[1a1]"></a>getInt16</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dlms.o(.text.getInt16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getInt16
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
</UL>

<P><STRONG><a name="[19b]"></a>getInt32</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dlms.o(.text.getInt32))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
</UL>

<P><STRONG><a name="[1a4]"></a>getInt64</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dlms.o(.text.getInt64))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getInt64 &rArr; bb_getInt64
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getInt64
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
</UL>

<P><STRONG><a name="[1a0]"></a>getInt8</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dlms.o(.text.getInt8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getInt8
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
</UL>

<P><STRONG><a name="[209]"></a>getKeepAlive</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dlmssettings.o(.text.getKeepAlive))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest4
</UL>

<P><STRONG><a name="[1d1]"></a>getLNAccessRights</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, gxget.o(.text.getLNAccessRights))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = getLNAccessRights &rArr; cosem_setArray &rArr; hlp_setObjectCount
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getMethodAccess
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getAttributeAccess
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_methodCount
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_attributeCount
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setEnum
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setArray
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setStructure
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLNObjects
</UL>

<P><STRONG><a name="[110]"></a>getLNObjects</STRONG> (Thumb, 676 bytes, Stack size 56 bytes, gxget.o(.text.getLNObjects))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = getLNObjects &rArr; getLNAccessRights &rArr; cosem_setArray &rArr; hlp_setObjectCount
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oa_getByIndex
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLNAccessRights
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_isPduFull
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oa_findByLN
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setArray
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setStructure
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt16
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt8
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setOctetString2
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_capacity
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getAssociationLogicalName
</UL>

<P><STRONG><a name="[1b9]"></a>getNextSend</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, dlmssettings.o(.text.getNextSend))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcFrame
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest4
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
</UL>

<P><STRONG><a name="[19d]"></a>getOctetString</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, dlms.o(.text.getOctetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = getOctetString &rArr; hlp_getObjectCount2 &rArr; bb_getUInt24
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
</UL>

<P><STRONG><a name="[207]"></a>getReceiverReady</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dlmssettings.o(.text.getReceiverReady))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest4
</UL>

<P><STRONG><a name="[19e]"></a>getString</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, dlms.o(.text.getString))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = getString &rArr; hlp_getObjectCount2 &rArr; bb_getUInt24
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
</UL>

<P><STRONG><a name="[1ac]"></a>getTime</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, dlms.o(.text.getTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = getTime &rArr; time_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
</UL>

<P><STRONG><a name="[1a3]"></a>getUInt16</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dlms.o(.text.getUInt16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getUInt16
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
</UL>

<P><STRONG><a name="[19c]"></a>getUInt32</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dlms.o(.text.getUInt32))
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
</UL>

<P><STRONG><a name="[1a5]"></a>getUInt64</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dlms.o(.text.getUInt64))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getUInt64 &rArr; bb_getUInt64
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt64
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
</UL>

<P><STRONG><a name="[1a2]"></a>getUInt8</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dlms.o(.text.getUInt8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getUInt8
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
</UL>

<P><STRONG><a name="[116]"></a>getUserList</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, gxget.o(.text.getUserList))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = getUserList &rArr; cosem_setArray &rArr; hlp_setObjectCount
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setArray
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setStructure
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setUInt8
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setOctetString2
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getAssociationLogicalName
</UL>

<P><STRONG><a name="[fa]"></a>gxaes_ecb_decrypt</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gxaes.o(.text.gxaes_ecb_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gxaes_ecb_decrypt &rArr; InvCipher
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_decryptKey
</UL>

<P><STRONG><a name="[1cb]"></a>gxaes_ecb_encrypt</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gxaes.o(.text.gxaes_ecb_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gxaes_ecb_encrypt &rArr; Cipher
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_secure
</UL>

<P><STRONG><a name="[211]"></a>hlp_getDataTypeSize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, helpers.o(.text.hlp_getDataTypeSize))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_copy
</UL>

<P><STRONG><a name="[d8]"></a>hlp_getObjectCount2</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, helpers.o(.text.hlp_getObjectCount2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hlp_getObjectCount2 &rArr; bb_getUInt24
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt24
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt32
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_decrypt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_AssociationLogicalName
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_copy
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleGbt
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBcd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOctetString
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getString
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBitString
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getIntegerFromBitString
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getTimeFromOctetString
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getDateFromOctetString
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getDateTimeFromOctetString
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getString2
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString2
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkArray
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkStructure
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_parsePDU
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequestWithList
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest2
</UL>

<P><STRONG><a name="[1bd]"></a>hlp_getObjectCountSizeInBytes</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, helpers.o(.text.hlp_getObjectCountSizeInBytes))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getLNPdu
</UL>

<P><STRONG><a name="[198]"></a>hlp_rand</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, helpers.o(.text.hlp_rand))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_generateChallenge
</UL>

<P><STRONG><a name="[cd]"></a>hlp_setObjectCount</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, helpers.o(.text.hlp_setObjectCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hlp_setObjectCount
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt16
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_parseUserInformation
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getSapAssignment
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getActionSchedule
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getLNPdu
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setArray
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setStructure
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setBitString
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_crypt
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_generateAARE
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getBytes3
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequestWithList
</UL>

<P><STRONG><a name="[d3]"></a>hlp_swapBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, helpers.o(.text.hlp_swapBits))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_setConformanceToArray
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_getConformanceFromArray
</UL>

<P><STRONG><a name="[156]"></a>invoke_AssociationLogicalName</STRONG> (Thumb, 762 bytes, Stack size 136 bytes, gxinvoke.o(.text.invoke_AssociationLogicalName))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = invoke_AssociationLogicalName &rArr; dlms_secure &rArr; cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_attach
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_secure
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getCapacity
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getString2
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt8
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkStructure
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_compare
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt32
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_insertUInt8
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_available
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_invoke
</UL>

<P><STRONG><a name="[154]"></a>invoke_Clock</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, gxinvoke.o(.text.invoke_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = invoke_Clock &rArr; cosem_getDateFromOctetString &rArr; dlms_getData &rArr;  dlms_getData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_toInteger
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_addTime
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_getSeconds
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_getMinutes
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_addHours
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getDateFromOctetString
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_invoke
</UL>

<P><STRONG><a name="[153]"></a>invoke_SapAssigment</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, gxinvoke.o(.text.invoke_SapAssigment))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = invoke_SapAssigment &rArr; cosem_getOctetString2 &rArr; hlp_getObjectCount2 &rArr; bb_getUInt24
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_removeByIndex
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString2
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt16
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkStructure
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_invoke
</UL>

<P><STRONG><a name="[155]"></a>invoke_ScriptTable</STRONG> (Thumb, 338 bytes, Stack size 152 bytes, gxinvoke.o(.text.invoke_ScriptTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = invoke_ScriptTable &rArr;  cosem_invoke (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_attach
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_postAction
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_postWrite
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_preAction
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_preWrite
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_invoke
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ve_init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_toInteger
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_clear
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_invoke
</UL>

<P><STRONG><a name="[157]"></a>invoke_SecuritySetup</STRONG> (Thumb, 322 bytes, Stack size 112 bytes, gxinvoke.o(.text.invoke_SecuritySetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = invoke_SecuritySetup &rArr; cip_decryptKey &rArr; gxaes_ecb_decrypt &rArr; InvCipher
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_attach
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_toInteger
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getEnum
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkArray
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkStructure
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_decryptKey
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_invoke
</UL>

<P><STRONG><a name="[c7]"></a>isCiphered</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dlmssettings.o(.text.isCiphered))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_generateApplicationContextName
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_generateAARE
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_getUserInformation
</UL>

<P><STRONG><a name="[79]"></a>main</STRONG> (Thumb, 738 bytes, Stack size 112 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1148 + Unknown Stack Size
<LI>Call Chain = main &rArr; svr_handleRequest &rArr; svr_handleRequest4 &rArr; svr_handleCommand &rArr; svr_handleMethodRequest &rArr; cosem_invoke &rArr; invoke_AssociationLogicalName &rArr; dlms_secure &rArr; cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_initialize
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_attach
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_attach
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RegisterCallback
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createObjects
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[18c]"></a>oa_attach</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, objectarray.o(.text.oa_attach))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createObjects
</UL>

<P><STRONG><a name="[164]"></a>oa_empty</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, objectarray.o(.text.oa_empty))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setAssociationLogicalName
</UL>

<P><STRONG><a name="[105]"></a>oa_findByLN</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, objectarray.o(.text.oa_findByLN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = oa_findByLN &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLNObjects
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_findObjectByLN
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNormal
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getTarget
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest2
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_HandleAarqRequest
</UL>

<P><STRONG><a name="[1d5]"></a>oa_getByIndex</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, objectarray.o(.text.oa_getByIndex))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_initialize
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLNObjects
</UL>

<P><STRONG><a name="[fe]"></a>oa_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, objectarray.o(.text.oa_init))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cl_init
</UL>

<P><STRONG><a name="[1d2]"></a>obj_attributeCount</STRONG> (Thumb, 460 bytes, Stack size 0 bytes, gxobjects.o(.text.obj_attributeCount))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLNAccessRights
</UL>

<P><STRONG><a name="[181]"></a>obj_clearByteBufferList</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gxobjects.o(.text.obj_clearByteBufferList))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSFSKReportingSystemList
</UL>

<P><STRONG><a name="[187]"></a>obj_clearCertificateInfo</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gxobjects.o(.text.obj_clearCertificateInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = obj_clearCertificateInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSecuritySetup
</UL>

<P><STRONG><a name="[1e6]"></a>obj_clearProfileGenericCaptureObjects</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gxobjects.o(.text.obj_clearProfileGenericCaptureObjects))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = obj_clearProfileGenericCaptureObjects
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCaptureObjects
</UL>

<P><STRONG><a name="[17b]"></a>obj_clearPushObjectList</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gxobjects.o(.text.obj_clearPushObjectList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = obj_clearPushObjectList
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setPushSetup
</UL>

<P><STRONG><a name="[183]"></a>obj_clearSapList</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gxobjects.o(.text.obj_clearSapList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = obj_clearSapList
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setSapAssignment
</UL>

<P><STRONG><a name="[185]"></a>obj_clearScriptTable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gxobjects.o(.text.obj_clearScriptTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = obj_clearScriptTable
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setScriptTable
</UL>

<P><STRONG><a name="[108]"></a>obj_getLogicalName</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gxobjects.o(.text.obj_getLogicalName))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getScriptTable
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getLimiter
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getAssociationLogicalName
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getActionSchedule
</UL>

<P><STRONG><a name="[14c]"></a>obj_methodCount</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, gxobjects.o(.text.obj_methodCount))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_invoke
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLNAccessRights
</UL>

<P><STRONG><a name="[1f2]"></a>params_initLN</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, parameters.o(.text.params_initLN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = params_initLN
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleGetRequest
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNextDataBlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNormal
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_reportError
</UL>

<P><STRONG><a name="[1e7]"></a>reply_clear2</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, replydata.o(.text.reply_clear2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reply_clear2
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest4
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSnrmRequest
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_reset
</UL>

<P><STRONG><a name="[1e8]"></a>reply_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, replydata.o(.text.reply_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reply_init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_init
</UL>

<P><STRONG><a name="[1c5]"></a>resetBlockIndex</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dlmssettings.o(.text.resetBlockIndex))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getValueFromData
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNormal
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequestWithList
</UL>

<P><STRONG><a name="[201]"></a>resetFrameSequence</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dlmssettings.o(.text.resetFrameSequence))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSnrmRequest
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_reset
</UL>

<P><STRONG><a name="[179]"></a>setCaptureObjects</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, gxsetignoremalloc.o(.text.setCaptureObjects))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = setCaptureObjects &rArr; cosem_findObjectByLN &rArr; oa_findByLN &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_clearProfileGenericCaptureObjects
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_findObjectByLN
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getCapacity
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getOctetString2
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getInt8
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getUInt16
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkArray
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_checkStructure
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arr_getByIndex2
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setProfileGeneric
</UL>

<P><STRONG><a name="[1e9]"></a>svr_HandleAarqRequest</STRONG> (Thumb, 856 bytes, Stack size 168 bytes, server.o(.text.svr_HandleAarqRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + Unknown Stack Size
<LI>Call Chain = svr_HandleAarqRequest &rArr; apdu_generateAARE &rArr; apdu_getUserInformation &rArr; cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_attach
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_invalidConnection
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_validateAuthentication
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_findObject
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ve_init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_clear
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_generateChallenge
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_addLLCBytes
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oa_findByLN
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_generateAARE
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_parsePDU
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_generateExceptionResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
</UL>

<P><STRONG><a name="[1c6]"></a>svr_connected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text.svr_connected))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleGloDedRequest
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest4
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
</UL>

<P><STRONG><a name="[1fc]"></a>svr_disconnected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text.svr_disconnected))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest4
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
</UL>

<P><STRONG><a name="[1ee]"></a>svr_findObject</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text.svr_findObject))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNormal
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getTarget
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest2
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_HandleAarqRequest
</UL>

<P><STRONG><a name="[1ef]"></a>svr_generateConfirmedServiceError</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, server.o(.text.svr_generateConfirmedServiceError))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svr_generateConfirmedServiceError &rArr; dlms_addLLCBytes &rArr; bb_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_addLLCBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest4
</UL>

<P><STRONG><a name="[1f0]"></a>svr_generateDisconnectRequest</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, server.o(.text.svr_generateDisconnectRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svr_generateDisconnectRequest &rArr; dlms_appendHdlcParameter
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_appendHdlcParameter
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt32
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8ByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
</UL>

<P><STRONG><a name="[1eb]"></a>svr_generateExceptionResponse</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, server.o(.text.svr_generateExceptionResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = svr_generateExceptionResponse &rArr; cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_addLLCBytes
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_useDedicatedKey
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt32
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_HandleAarqRequest
</UL>

<P><STRONG><a name="[1d3]"></a>svr_getAttributeAccess</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(.text.svr_getAttributeAccess))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLNAccessRights
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNormal
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getTarget
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest2
</UL>

<P><STRONG><a name="[1d4]"></a>svr_getMethodAccess</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(.text.svr_getMethodAccess))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLNAccessRights
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
</UL>

<P><STRONG><a name="[1f1]"></a>svr_getRequestNextDataBlock</STRONG> (Thumb, 326 bytes, Stack size 112 bytes, server.o(.text.svr_getRequestNextDataBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = svr_getRequestNextDataBlock &rArr; dlms_getLNPdu &rArr; cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_postRead
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_getByIndex
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_preRead
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getLNPdu
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_initLN
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_setData
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_clear
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleGetRequest
</UL>

<P><STRONG><a name="[1f6]"></a>svr_getRequestNormal</STRONG> (Thumb, 662 bytes, Stack size 104 bytes, server.o(.text.svr_getRequestNormal))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = svr_getRequestNormal &rArr; dlms_getLNPdu &rArr; cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getAttributeAccess
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_postRead
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_preRead
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_findObject
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_clear
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetBlockIndex
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getLNPdu
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_initLN
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oa_findByLN
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_setData
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_isAttached
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt16
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ve_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleGetRequest
</UL>

<P><STRONG><a name="[1f8]"></a>svr_getRequestWithList</STRONG> (Thumb, 674 bytes, Stack size 120 bytes, server.o(.text.svr_getRequestWithList))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = svr_getRequestWithList &rArr; dlms_getLNPdu &rArr; cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_setObjectCount
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getAttributeAccess
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_postRead
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_getByIndex
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_preRead
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_findObject
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getLNPdu
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_initLN
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oa_findByLN
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_setData
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_clear
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;di_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_isAttached
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8ByIndex
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt16
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ve_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleGetRequest
</UL>

<P><STRONG><a name="[1f9]"></a>svr_getTarget</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, server.o(.text.svr_getTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svr_getTarget &rArr; oa_findByLN &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getAttributeAccess
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_findObject
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oa_findByLN
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequestWithList
</UL>

<P><STRONG><a name="[1fa]"></a>svr_handleCommand</STRONG> (Thumb, 764 bytes, Stack size 32 bytes, server.o(.text.svr_handleCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 940 + Unknown Stack Size
<LI>Call Chain = svr_handleCommand &rArr; svr_handleMethodRequest &rArr; cosem_invoke &rArr; invoke_AssociationLogicalName &rArr; dlms_secure &rArr; cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_disconnected
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_connected
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_clear
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetFrameSequence
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_addLLCBytes
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getWrapperFrame
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextSend
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcFrame
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_useHdlc
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_size
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_available
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set2
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleReleaseRequest
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleGetRequest
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_generateDisconnectRequest
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSnrmRequest
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_HandleAarqRequest
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_generateExceptionResponse
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_clear2
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest4
</UL>

<P><STRONG><a name="[202]"></a>svr_handleGetRequest</STRONG> (Thumb, 210 bytes, Stack size 88 bytes, server.o(.text.svr_handleGetRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = svr_handleGetRequest &rArr; svr_getRequestWithList &rArr; dlms_getLNPdu &rArr; cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateInvokeId
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getLNPdu
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_initLN
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNextDataBlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNormal
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
</UL>

<P><STRONG><a name="[200]"></a>svr_handleMethodRequest</STRONG> (Thumb, 730 bytes, Stack size 112 bytes, server.o(.text.svr_handleMethodRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 908 + Unknown Stack Size
<LI>Call Chain = svr_handleMethodRequest &rArr; cosem_invoke &rArr; invoke_AssociationLogicalName &rArr; dlms_secure &rArr; cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_invalidConnection
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_connected
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getMethodAccess
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_postAction
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_preAction
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_findObject
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_invoke
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateInvokeId
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getLNPdu
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_initLN
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oa_findByLN
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_setData
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_clear
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;di_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_insertUInt8
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_size
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_isAttached
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt16
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ve_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
</UL>

<P><STRONG><a name="[1fe]"></a>svr_handleReleaseRequest</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, server.o(.text.svr_handleReleaseRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = svr_handleReleaseRequest &rArr; apdu_getUserInformation &rArr; cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_attach
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_addLLCBytes
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_getUserInformation
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
</UL>

<P><STRONG><a name="[1e5]"></a>svr_handleRequest</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, server.o(.text.svr_handleRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036 + Unknown Stack Size
<LI>Call Chain = svr_handleRequest &rArr; svr_handleRequest4 &rArr; svr_handleCommand &rArr; svr_handleMethodRequest &rArr; cosem_invoke &rArr; invoke_AssociationLogicalName &rArr; dlms_secure &rArr; cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_available
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest4
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[204]"></a>svr_handleRequest4</STRONG> (Thumb, 1158 bytes, Stack size 56 bytes, server.o(.text.svr_handleRequest4))
<BR><BR>[Stack]<UL><LI>Max Depth = 996 + Unknown Stack Size
<LI>Call Chain = svr_handleRequest4 &rArr; svr_handleCommand &rArr; svr_handleMethodRequest &rArr; cosem_invoke &rArr; invoke_AssociationLogicalName &rArr; dlms_secure &rArr; cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_attach
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_disconnected
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_connected
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_isTarget
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_elapsed
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getKeepAlive
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData2
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiverReady
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextSend
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcFrame
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getCapacity
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_isAttached
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_generateConfirmedServiceError
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_reportError
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_addFrame
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_reset
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_clear2
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest
</UL>

<P><STRONG><a name="[1fd]"></a>svr_handleSetRequest</STRONG> (Thumb, 194 bytes, Stack size 88 bytes, server.o(.text.svr_handleSetRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = svr_handleSetRequest &rArr; dlms_getLNPdu &rArr; cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateInvokeId
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetBlockIndex
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getLNPdu
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_initLN
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequestWithList
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest2
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
</UL>

<P><STRONG><a name="[20b]"></a>svr_handleSetRequest2</STRONG> (Thumb, 464 bytes, Stack size 88 bytes, server.o(.text.svr_handleSetRequest2))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = svr_handleSetRequest2 &rArr; cosem_setValue &rArr; cosem_setPushSetup &rArr; cosem_getDateTimeFromOctetString &rArr; dlms_getData &rArr;  dlms_getData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getAttributeAccess
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_postWrite
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_preWrite
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_findObject
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_clear
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oa_findByLN
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt32
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt16
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ve_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest
</UL>

<P><STRONG><a name="[20a]"></a>svr_handleSetRequestWithList</STRONG> (Thumb, 442 bytes, Stack size 104 bytes, server.o(.text.svr_handleSetRequestWithList))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = svr_handleSetRequestWithList &rArr; cosem_setValue &rArr; cosem_setPushSetup &rArr; cosem_getDateTimeFromOctetString &rArr; dlms_getData &rArr;  dlms_getData (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_setObjectCount
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_attach
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_postWrite
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_preWrite
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setValue
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetBlockIndex
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;di_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8ByIndex
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getTarget
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ve_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest
</UL>

<P><STRONG><a name="[1ff]"></a>svr_handleSnrmRequest</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, server.o(.text.svr_handleSnrmRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svr_handleSnrmRequest &rArr; dlms_parseSnrmUaResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_clear
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetFrameSequence
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_appendHdlcParameter
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_parseSnrmUaResponse
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt32
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8ByIndex
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_clear2
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
</UL>

<P><STRONG><a name="[1e3]"></a>svr_init</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, dlmssettings.o(.text.svr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svr_init &rArr; cl_init &rArr; bb_addString &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_attach
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e4]"></a>svr_initialize</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, server.o(.text.svr_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svr_initialize &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oa_getByIndex
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ed]"></a>svr_invalidConnection</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text.svr_invalidConnection))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_HandleAarqRequest
</UL>

<P><STRONG><a name="[1b7]"></a>svr_isTarget</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, main.o(.text.svr_isTarget))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_handleGloDedRequest
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcData
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest4
</UL>

<P><STRONG><a name="[1de]"></a>svr_postAction</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, main.o(.text.svr_postAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svr_postAction
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_getByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_ScriptTable
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
</UL>

<P><STRONG><a name="[151]"></a>svr_postGet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.svr_postGet))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_invoke
</UL>

<P><STRONG><a name="[1f5]"></a>svr_postRead</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.svr_postRead))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNextDataBlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNormal
</UL>

<P><STRONG><a name="[1dd]"></a>svr_postWrite</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.svr_postWrite))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_ScriptTable
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequestWithList
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest2
</UL>

<P><STRONG><a name="[1db]"></a>svr_preAction</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, main.o(.text.svr_preAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svr_preAction
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_getByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_ScriptTable
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
</UL>

<P><STRONG><a name="[150]"></a>svr_preGet</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, main.o(.text.svr_preGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svr_preGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_getByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_invoke
</UL>

<P><STRONG><a name="[1f4]"></a>svr_preRead</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, main.o(.text.svr_preRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svr_preRead
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_setUInt16
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_getByIndex
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_initUnix
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNextDataBlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNormal
</UL>

<P><STRONG><a name="[1dc]"></a>svr_preWrite</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.svr_preWrite))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_ScriptTable
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequestWithList
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest2
</UL>

<P><STRONG><a name="[208]"></a>svr_reportError</STRONG> (Thumb, 216 bytes, Stack size 104 bytes, server.o(.text.svr_reportError))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = svr_reportError &rArr; dlms_getLNPdu &rArr; cip_encrypt &rArr; cip_crypt &rArr; aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getWrapperFrame
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getLNPdu
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_initLN
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getHdlcFrame
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_size
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set2
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest4
</UL>

<P><STRONG><a name="[206]"></a>svr_reset</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, server.o(.text.svr_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svr_reset &rArr; reply_clear2
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_clear
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_clear
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetFrameSequence
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_clear2
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest4
</UL>

<P><STRONG><a name="[1ec]"></a>svr_validateAuthentication</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text.svr_validateAuthentication))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_HandleAarqRequest
</UL>

<P><STRONG><a name="[15e]"></a>time_addHours</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, date.o(.text.time_addHours))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_Clock
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setActionSchedule
</UL>

<P><STRONG><a name="[160]"></a>time_addMinutes</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, date.o(.text.time_addMinutes))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setActionSchedule
</UL>

<P><STRONG><a name="[162]"></a>time_addSeconds</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, date.o(.text.time_addSeconds))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setActionSchedule
</UL>

<P><STRONG><a name="[1d9]"></a>time_addTime</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, date.o(.text.time_addTime))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_Clock
</UL>

<P><STRONG><a name="[11d]"></a>time_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, date.o(.text.time_clear))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getDateTime
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getTimeFromOctetString
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getDateFromOctetString
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getDateTimeFromOctetString
</UL>

<P><STRONG><a name="[15c]"></a>time_clearDate</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, date.o(.text.time_clearDate))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setActionSchedule
</UL>

<P><STRONG><a name="[15b]"></a>time_clearTime</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, date.o(.text.time_clearTime))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setActionSchedule
</UL>

<P><STRONG><a name="[101]"></a>time_compare</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, date.o(.text.time_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = time_compare &rArr; time_compareWithDiff &rArr; time_toUnixTime2
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_toUnixTime2
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_compareWithDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_updateDST
</UL>

<P><STRONG><a name="[20f]"></a>time_compareWithDiff</STRONG> (Thumb, 800 bytes, Stack size 104 bytes, date.o(.text.time_compareWithDiff))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = time_compareWithDiff &rArr; time_toUnixTime2
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_toUnixTime2
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_compare
</UL>

<P><STRONG><a name="[205]"></a>time_elapsed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text.time_elapsed))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleRequest4
</UL>

<P><STRONG><a name="[216]"></a>time_fromUnixTime2</STRONG> (Thumb, 464 bytes, Stack size 28 bytes, date.o(.text.time_fromUnixTime2))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = time_fromUnixTime2
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getTime
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getDate
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getDateTime2
</UL>

<P><STRONG><a name="[15d]"></a>time_getHours</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, date.o(.text.time_getHours))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setActionSchedule
</UL>

<P><STRONG><a name="[15f]"></a>time_getMinutes</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, date.o(.text.time_getMinutes))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_Clock
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setActionSchedule
</UL>

<P><STRONG><a name="[161]"></a>time_getSeconds</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, date.o(.text.time_getSeconds))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_Clock
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setActionSchedule
</UL>

<P><STRONG><a name="[18d]"></a>time_init</STRONG> (Thumb, 330 bytes, Stack size 20 bytes, date.o(.text.time_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = time_init
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createObjects
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDateTime
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDate
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTime
</UL>

<P><STRONG><a name="[1bb]"></a>time_initUnix</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, date.o(.text.time_initUnix))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_preRead
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getLNPdu
</UL>

<P><STRONG><a name="[169]"></a>time_toUTC</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, date.o(.text.time_toUTC))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setClock
</UL>

<P><STRONG><a name="[20e]"></a>time_toUnixTime2</STRONG> (Thumb, 340 bytes, Stack size 28 bytes, date.o(.text.time_toUnixTime2))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = time_toUnixTime2
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_compare
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_compareWithDiff
</UL>

<P><STRONG><a name="[1ea]"></a>trans_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dlmssettings.o(.text.trans_clear))
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleCommand
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSnrmRequest
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_HandleAarqRequest
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_reset
</UL>

<P><STRONG><a name="[203]"></a>updateInvokeId</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dlmssettings.o(.text.updateInvokeId))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleGetRequest
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest
</UL>

<P><STRONG><a name="[1ad]"></a>va_getByIndex</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, variant.o(.text.va_getByIndex))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
</UL>

<P><STRONG><a name="[199]"></a>va_getCapacity</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, variant.o(.text.va_getCapacity))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
</UL>

<P><STRONG><a name="[147]"></a>var_clear</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, variant.o(.text.var_clear))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_invoke
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_ScriptTable
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getValueFromData
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getVariant
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNextDataBlock
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_clear2
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ve_clear
</UL>

<P><STRONG><a name="[13b]"></a>var_copy</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, variant.o(.text.var_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = var_copy &rArr; var_getBytes3 &rArr;  var_getBytes3 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getBytes3
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getDataTypeSize
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_toInteger
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getValue
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getRegister
</UL>

<P><STRONG><a name="[1bc]"></a>var_getBytes2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, variant.o(.text.var_getBytes2))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = var_getBytes2 &rArr; var_getBytes3 &rArr;  var_getBytes3 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getBytes3
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getLNPdu
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_setData
</UL>

<P><STRONG><a name="[210]"></a>var_getBytes3</STRONG> (Thumb, 728 bytes, Stack size 24 bytes, variant.o(.text.var_getBytes3))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + In Cycle
<LI>Call Chain = var_getBytes3 &rArr;  var_getBytes3 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt16
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_setObjectCount
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getTime
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getDate
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getDateTime2
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setInt64
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setInt16
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setDouble
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setFloat
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt64
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt32
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setInt8
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ba_getByteCount
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getBytes3
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_copy
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getBytes2
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getBytes3
</UL>

<P><STRONG><a name="[16b]"></a>var_getDate</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, variant.o(.text.var_getDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = var_getDate &rArr; time_fromUnixTime2
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt16
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_fromUnixTime2
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setDateAsOctetString
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getBytes3
</UL>

<P><STRONG><a name="[16c]"></a>var_getDateTime2</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, variant.o(.text.var_getDateTime2))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = var_getDateTime2 &rArr; time_fromUnixTime2
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt16
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_fromUnixTime2
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setDateTime
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setDateTimeAsOctetString
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getBytes3
</UL>

<P><STRONG><a name="[188]"></a>var_getTime</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, variant.o(.text.var_getTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = var_getTime &rArr; time_fromUnixTime2
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_setUInt8
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_fromUnixTime2
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_setTimeAsOctetString
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_getBytes3
</UL>

<P><STRONG><a name="[132]"></a>var_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, variant.o(.text.var_init))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ve_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_getMbusDiagnostic
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getValueFromData
</UL>

<P><STRONG><a name="[20d]"></a>var_setUInt16</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, variant.o(.text.var_setUInt16))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_preRead
</UL>

<P><STRONG><a name="[1da]"></a>var_toInteger</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, variant.o(.text.var_toInteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + In Cycle
<LI>Call Chain = var_toInteger &rArr;  var_toInteger (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_toInteger
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_copy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_Clock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_ScriptTable
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_toInteger
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_SecuritySetup
</UL>

<P><STRONG><a name="[1f7]"></a>ve_clear</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gxvalueeventargs.o(.text.ve_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ve_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleMethodRequest
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNormal
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequestWithList
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest2
</UL>

<P><STRONG><a name="[14d]"></a>ve_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gxvalueeventargs.o(.text.ve_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ve_init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_invoke
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_ScriptTable
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_HandleAarqRequest
</UL>

<P><STRONG><a name="[14f]"></a>vec_attach</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gxvalueeventargs.o(.text.vec_attach))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_invoke
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_ScriptTable
</UL>

<P><STRONG><a name="[1df]"></a>vec_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gxvalueeventargs.o(.text.vec_clear))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invoke_ScriptTable
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_clear
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNormal
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_handleSetRequest2
</UL>

<P><STRONG><a name="[152]"></a>vec_empty</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gxvalueeventargs.o(.text.vec_empty))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosem_invoke
</UL>

<P><STRONG><a name="[1f3]"></a>vec_getByIndex</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gxvalueeventargs.o(.text.vec_getByIndex))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_preGet
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_postAction
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_preAction
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_preRead
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestWithList
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_getRequestNextDataBlock
</UL>

<P><STRONG><a name="[20c]"></a>vec_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gxvalueeventargs.o(.text.vec_init))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svr_init
</UL>

<P><STRONG><a name="[88]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[50]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ba_toInteger
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ba_getByteCount
</UL>

<P><STRONG><a name="[218]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;var_toInteger
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ba_toInteger
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ba_setByIndex
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ba_getByteCount
</UL>

<P><STRONG><a name="[21c]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ba_toInteger
</UL>

<P><STRONG><a name="[259]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[e3]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ba_setByIndex
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ba_getByteCount
</UL>

<P><STRONG><a name="[25a]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[e4]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ba_toInteger
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ba_setByIndex
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ba_getByteCount
</UL>

<P><STRONG><a name="[21d]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[21b]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
</UL>

<P><STRONG><a name="[21a]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[25b]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[21e]"></a>_dsub</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[70]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[25c]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[25d]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5d]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 330 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.UART_RxISR_8BIT))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[5e]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 330 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.UART_RxISR_16BIT))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[51]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[a9]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(.text.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[c4]"></a>cip_getGHash</STRONG> (Thumb, 472 bytes, Stack size 48 bytes, ciphering.o(.text.cip_getGHash))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_multiplyH
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_crypt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_gcm_ghash
</UL>

<P><STRONG><a name="[c3]"></a>aes_gcm_ghash</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, ciphering.o(.text.aes_gcm_ghash))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = aes_gcm_ghash &rArr; cip_getGHash &rArr; cip_multiplyH
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_getGHash
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_crypt
</UL>

<P><STRONG><a name="[c2]"></a>cip_gctr</STRONG> (Thumb, 1034 bytes, Stack size 88 bytes, ciphering.o(.text.cip_gctr))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = cip_gctr &rArr; aes_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_crypt
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_gcm_gctr
</UL>

<P><STRONG><a name="[c1]"></a>aes_gcm_gctr</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ciphering.o(.text.aes_gcm_gctr))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = aes_gcm_gctr &rArr; cip_gctr &rArr; aes_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_gctr
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_crypt
</UL>

<P><STRONG><a name="[fb]"></a>cip_multiplyH</STRONG> (Thumb, 666 bytes, Stack size 172 bytes, ciphering.o(.text.cip_multiplyH))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = cip_multiplyH
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cip_getGHash
</UL>

<P><STRONG><a name="[19a]"></a>getBool</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, dlms.o(.text.getBool))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getBool
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bb_getUInt8
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
</UL>

<P><STRONG><a name="[1ab]"></a>getBitString</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, dlms.o(.text.getBitString))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = getBitString &rArr; ba_getByteCount &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ba_getByteCount
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hlp_getObjectCount2
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlms_getData
</UL>

<P><STRONG><a name="[1d7]"></a>KeyExpansion</STRONG> (Thumb, 260 bytes, Stack size 36 bytes, gxaes.o(.text.KeyExpansion))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = KeyExpansion
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gxaes_ecb_decrypt
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gxaes_ecb_encrypt
</UL>

<P><STRONG><a name="[9b]"></a>Cipher</STRONG> (Thumb, 920 bytes, Stack size 48 bytes, gxaes.o(.text.Cipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Cipher
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gxaes_ecb_encrypt
</UL>

<P><STRONG><a name="[9c]"></a>AddRoundKey</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, gxaes.o(.text.AddRoundKey))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[ba]"></a>InvCipher</STRONG> (Thumb, 858 bytes, Stack size 72 bytes, gxaes.o(.text.InvCipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = InvCipher
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gxaes_ecb_decrypt
</UL>

<P><STRONG><a name="[21f]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[219]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[4f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
